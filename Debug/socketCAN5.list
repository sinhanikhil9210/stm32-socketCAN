
socketCAN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800abc0  0800abc0  0000bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac80  0800ac80  0000c0a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ac80  0800ac80  0000bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac88  0800ac88  0000c0a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac88  0800ac88  0000bc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac8c  0800ac8c  0000bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800ac90  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  200000a4  0800ad34  0000c0a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d2c  0800ad34  0000cd2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001839e  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a72  00000000  00000000  00024472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00027ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea7  00000000  00000000  00029230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252d8  00000000  00000000  0002a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a43d  00000000  00000000  0004f3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4b12  00000000  00000000  000697ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e2fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  0013e344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001433b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800aba8 	.word	0x0800aba8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	0800aba8 	.word	0x0800aba8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fd74 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f81c 	bl	8000574 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800053c:	f000 f88e 	bl	800065c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9b2 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000544:	f000 f972 	bl	800082c <MX_DMA_Init>
  MX_CAN1_Init();
 8000548:	f000 f8b0 	bl	80006ac <MX_CAN1_Init>
  MX_CAN2_Init();
 800054c:	f000 f8e4 	bl	8000718 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 8000550:	f009 fccc 	bl	8009eec <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000554:	f000 f91a 	bl	800078c <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8000558:	f000 f93e 	bl	80007d8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800055c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000560:	4803      	ldr	r0, [pc, #12]	@ (8000570 <main+0x40>)
 8000562:	f002 f8e6 	bl	8002732 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	@ 0x64
 8000568:	f000 fdcc 	bl	8001104 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800056c:	bf00      	nop
 800056e:	e7f5      	b.n	800055c <main+0x2c>
 8000570:	40020800 	.word	0x40020800

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	@ 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f00a fad5 	bl	800ab32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b2d      	ldr	r3, [pc, #180]	@ (8000654 <SystemClock_Config+0xe0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000654 <SystemClock_Config+0xe0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000654 <SystemClock_Config+0xe0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <SystemClock_Config+0xe4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <SystemClock_Config+0xe4>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <SystemClock_Config+0xe4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005e4:	230c      	movs	r3, #12
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80005e8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80005ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 f976 	bl	80048f0 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060a:	f000 f9bb 	bl	8000984 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800060e:	f003 fb31 	bl	8003c74 <HAL_PWREx_EnableOverDrive>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000618:	f000 f9b4 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000632:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2105      	movs	r1, #5
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fb6a 	bl	8003d14 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000646:	f000 f99d 	bl	8000984 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b098      	sub	sp, #96	@ 0x60
 8000660:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	225c      	movs	r2, #92	@ 0x5c
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00a fa62 	bl	800ab32 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800066e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000672:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 12;
 8000674:	230c      	movs	r3, #12
 8000676:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000678:	23c0      	movs	r3, #192	@ 0xc0
 800067a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000680:	2304      	movs	r3, #4
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000688:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800068c:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800068e:	2300      	movs	r3, #0
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fc57 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80006a0:	f000 f970 	bl	8000984 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3760      	adds	r7, #96	@ 0x60
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	@ (8000714 <MX_CAN1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006b8:	2209      	movs	r2, #9
 80006ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_CAN1_Init+0x64>)
 80006fe:	f000 fd25 	bl	800114c <HAL_CAN_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f93c 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000c0 	.word	0x200000c0
 8000714:	40006400 	.word	0x40006400

08000718 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800071e:	4a1a      	ldr	r2, [pc, #104]	@ (8000788 <MX_CAN2_Init+0x70>)
 8000720:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000724:	2209      	movs	r2, #9
 8000726:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000736:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800073a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800073e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000742:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000746:	2200      	movs	r2, #0
 8000748:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800074c:	2200      	movs	r2, #0
 800074e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000752:	2200      	movs	r2, #0
 8000754:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000758:	2200      	movs	r2, #0
 800075a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800075e:	2200      	movs	r2, #0
 8000760:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_CAN2_Init+0x6c>)
 8000764:	2200      	movs	r2, #0
 8000766:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800076a:	f000 fcef 	bl	800114c <HAL_CAN_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000774:	f000 f906 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000778:	2102      	movs	r1, #2
 800077a:	4802      	ldr	r0, [pc, #8]	@ (8000784 <MX_CAN2_Init+0x6c>)
 800077c:	f000 ff3e 	bl	80015fc <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000e8 	.word	0x200000e8
 8000788:	40006800 	.word	0x40006800

0800078c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <MX_SDIO_SD_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_SDIO_SD_Init+0x44>)
 80007bc:	f004 fb36 	bl	8004e2c <HAL_SD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80007c6:	f000 f8dd 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000110 	.word	0x20000110
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f005 f9b6 	bl	8005b80 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f8b3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001f4 	.word	0x200001f4
 8000828:	40004400 	.word	0x40004400

0800082c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b1b      	ldr	r3, [pc, #108]	@ (80008a4 <MX_DMA_Init+0x78>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a1a      	ldr	r2, [pc, #104]	@ (80008a4 <MX_DMA_Init+0x78>)
 800083c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <MX_DMA_Init+0x78>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_DMA_Init+0x78>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <MX_DMA_Init+0x78>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_DMA_Init+0x78>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2010      	movs	r0, #16
 8000870:	f001 f9ff 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000874:	2010      	movs	r0, #16
 8000876:	f001 fa18 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2011      	movs	r0, #17
 8000880:	f001 f9f7 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000884:	2011      	movs	r0, #17
 8000886:	f001 fa10 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	203b      	movs	r0, #59	@ 0x3b
 8000890:	f001 f9ef 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000894:	203b      	movs	r0, #59	@ 0x3b
 8000896:	f001 fa08 	bl	8001caa <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a2d      	ldr	r2, [pc, #180]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b27      	ldr	r3, [pc, #156]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a26      	ldr	r2, [pc, #152]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <MX_GPIO_Init+0xd4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a18      	ldr	r2, [pc, #96]	@ (800097c <MX_GPIO_Init+0xd4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a11      	ldr	r2, [pc, #68]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <MX_GPIO_Init+0xd8>)
 8000952:	f001 fed5 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_GPIO_Init+0xd8>)
 8000970:	f001 fd32 	bl	80023d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	@ 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a53      	ldr	r2, [pc, #332]	@ (8000b4c <HAL_CAN_MspInit+0x16c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d146      	bne.n	8000a90 <HAL_CAN_MspInit+0xb0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a02:	4b53      	ldr	r3, [pc, #332]	@ (8000b50 <HAL_CAN_MspInit+0x170>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a51      	ldr	r2, [pc, #324]	@ (8000b50 <HAL_CAN_MspInit+0x170>)
 8000a0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a0c:	4b50      	ldr	r3, [pc, #320]	@ (8000b50 <HAL_CAN_MspInit+0x170>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10d      	bne.n	8000a30 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	4b4e      	ldr	r3, [pc, #312]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b4b      	ldr	r3, [pc, #300]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a2c:	61bb      	str	r3, [r7, #24]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	4b47      	ldr	r3, [pc, #284]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a46      	ldr	r2, [pc, #280]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a40:	4b44      	ldr	r3, [pc, #272]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a4c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a5e:	2309      	movs	r3, #9
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	483b      	ldr	r0, [pc, #236]	@ (8000b58 <HAL_CAN_MspInit+0x178>)
 8000a6a:	f001 fcb5 	bl	80023d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2014      	movs	r0, #20
 8000a74:	f001 f8fd 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a78:	2014      	movs	r0, #20
 8000a7a:	f001 f916 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2015      	movs	r0, #21
 8000a84:	f001 f8f5 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a88:	2015      	movs	r0, #21
 8000a8a:	f001 f90e 	bl	8001caa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000a8e:	e058      	b.n	8000b42 <HAL_CAN_MspInit+0x162>
  else if(hcan->Instance==CAN2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a31      	ldr	r2, [pc, #196]	@ (8000b5c <HAL_CAN_MspInit+0x17c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d153      	bne.n	8000b42 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <HAL_CAN_MspInit+0x170>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <HAL_CAN_MspInit+0x170>)
 8000abe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ac0:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <HAL_CAN_MspInit+0x170>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d10d      	bne.n	8000ae4 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	4a20      	ldr	r2, [pc, #128]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000ad2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_CAN_MspInit+0x174>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b00:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b12:	2309      	movs	r3, #9
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <HAL_CAN_MspInit+0x178>)
 8000b1e:	f001 fc5b 	bl	80023d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2040      	movs	r0, #64	@ 0x40
 8000b28:	f001 f8a3 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000b2c:	2040      	movs	r0, #64	@ 0x40
 8000b2e:	f001 f8bc 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2041      	movs	r0, #65	@ 0x41
 8000b38:	f001 f89b 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000b3c:	2041      	movs	r0, #65	@ 0x41
 8000b3e:	f001 f8b4 	bl	8001caa <HAL_NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	@ 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40006400 	.word	0x40006400
 8000b50:	200002fc 	.word	0x200002fc
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40006800 	.word	0x40006800

08000b60 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8000cf4 <HAL_SD_MspInit+0x194>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 80b3 	bne.w	8000cea <HAL_SD_MspInit+0x18a>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8c:	4a5a      	ldr	r2, [pc, #360]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000b8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b92:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b94:	4b58      	ldr	r3, [pc, #352]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	4b54      	ldr	r3, [pc, #336]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a53      	ldr	r2, [pc, #332]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b51      	ldr	r3, [pc, #324]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b46      	ldr	r3, [pc, #280]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	4a45      	ldr	r2, [pc, #276]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <HAL_SD_MspInit+0x198>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c04:	230c      	movs	r3, #12
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	483b      	ldr	r0, [pc, #236]	@ (8000cfc <HAL_SD_MspInit+0x19c>)
 8000c10:	f001 fbe2 	bl	80023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c26:	230c      	movs	r3, #12
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4833      	ldr	r0, [pc, #204]	@ (8000d00 <HAL_SD_MspInit+0x1a0>)
 8000c32:	f001 fbd1 	bl	80023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c36:	2304      	movs	r3, #4
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c46:	230c      	movs	r3, #12
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	482c      	ldr	r0, [pc, #176]	@ (8000d04 <HAL_SD_MspInit+0x1a4>)
 8000c52:	f001 fbc1 	bl	80023d8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c58:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <HAL_SD_MspInit+0x1ac>)
 8000c5a:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c62:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c64:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6a:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c76:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c78:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c7a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c90:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c94:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000ca4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000cac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 8000cb2:	4815      	ldr	r0, [pc, #84]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000cb4:	f001 f814 	bl	8001ce0 <HAL_DMA_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_SD_MspInit+0x162>
    {
      Error_Handler();
 8000cbe:	f7ff fe61 	bl	8000984 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000cc6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <HAL_SD_MspInit+0x1a8>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2031      	movs	r0, #49	@ 0x31
 8000ce0:	f000 ffc7 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ce4:	2031      	movs	r0, #49	@ 0x31
 8000ce6:	f000 ffe0 	bl	8001caa <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	@ 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	20000194 	.word	0x20000194
 8000d0c:	40026458 	.word	0x40026458

08000d10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8000e64 <HAL_UART_MspInit+0x154>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	f040 8094 	bne.w	8000e5c <HAL_UART_MspInit+0x14c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b4b      	ldr	r3, [pc, #300]	@ (8000e68 <HAL_UART_MspInit+0x158>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8000e68 <HAL_UART_MspInit+0x158>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d44:	4b48      	ldr	r3, [pc, #288]	@ (8000e68 <HAL_UART_MspInit+0x158>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b44      	ldr	r3, [pc, #272]	@ (8000e68 <HAL_UART_MspInit+0x158>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d58:	4a43      	ldr	r2, [pc, #268]	@ (8000e68 <HAL_UART_MspInit+0x158>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d60:	4b41      	ldr	r3, [pc, #260]	@ (8000e68 <HAL_UART_MspInit+0x158>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4839      	ldr	r0, [pc, #228]	@ (8000e6c <HAL_UART_MspInit+0x15c>)
 8000d88:	f001 fb26 	bl	80023d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d8c:	4b38      	ldr	r3, [pc, #224]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000d8e:	4a39      	ldr	r2, [pc, #228]	@ (8000e74 <HAL_UART_MspInit+0x164>)
 8000d90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d92:	4b37      	ldr	r3, [pc, #220]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000d94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9a:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b32      	ldr	r3, [pc, #200]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dae:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000dbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000dc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dca:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dd0:	4827      	ldr	r0, [pc, #156]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000dd2:	f000 ff85 	bl	8001ce0 <HAL_DMA_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000ddc:	f7ff fdd2 	bl	8000984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a23      	ldr	r2, [pc, #140]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000de4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <HAL_UART_MspInit+0x160>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000dee:	4a23      	ldr	r2, [pc, #140]	@ (8000e7c <HAL_UART_MspInit+0x16c>)
 8000df0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000df4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000dfc:	2240      	movs	r2, #64	@ 0x40
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e28:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e30:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e32:	f000 ff55 	bl	8001ce0 <HAL_DMA_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8000e3c:	f7ff fda2 	bl	8000984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <HAL_UART_MspInit+0x168>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2026      	movs	r0, #38	@ 0x26
 8000e52:	f000 ff0e 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e56:	2026      	movs	r0, #38	@ 0x26
 8000e58:	f000 ff27 	bl	8001caa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	@ 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	2000023c 	.word	0x2000023c
 8000e74:	40026088 	.word	0x40026088
 8000e78:	2000029c 	.word	0x2000029c
 8000e7c:	400260a0 	.word	0x400260a0

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f8f5 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ee6:	f001 f83b 	bl	8001f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000023c 	.word	0x2000023c

08000ef4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Stream6_IRQHandler+0x10>)
 8000efa:	f001 f831 	bl	8001f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000029c 	.word	0x2000029c

08000f08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <CAN1_RX0_IRQHandler+0x10>)
 8000f0e:	f000 fb9b 	bl	8001648 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000c0 	.word	0x200000c0

08000f1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <CAN1_RX1_IRQHandler+0x10>)
 8000f22:	f000 fb91 	bl	8001648 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000c0 	.word	0x200000c0

08000f30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <USART2_IRQHandler+0x10>)
 8000f36:	f004 fe73 	bl	8005c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001f4 	.word	0x200001f4

08000f44 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <SDIO_IRQHandler+0x10>)
 8000f4a:	f004 f81f 	bl	8004f8c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000110 	.word	0x20000110

08000f58 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA2_Stream3_IRQHandler+0x10>)
 8000f5e:	f000 ffff 	bl	8001f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000194 	.word	0x20000194

08000f6c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <CAN2_RX0_IRQHandler+0x10>)
 8000f72:	f000 fb69 	bl	8001648 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000e8 	.word	0x200000e8

08000f80 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <CAN2_RX1_IRQHandler+0x10>)
 8000f86:	f000 fb5f 	bl	8001648 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000e8 	.word	0x200000e8

08000f94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <OTG_FS_IRQHandler+0x10>)
 8000f9a:	f001 fd2f 	bl	80029fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200005e4 	.word	0x200005e4

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f009 fda3 	bl	800ab44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fa97 	bl	8000530 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001010:	0800ac90 	.word	0x0800ac90
  ldr r2, =_sbss
 8001014:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001018:	20000d2c 	.word	0x20000d2c

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0d      	ldr	r2, [pc, #52]	@ (8001060 <HAL_Init+0x40>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800102e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_Init+0x40>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	@ (8001060 <HAL_Init+0x40>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 fe07 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fc9c 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023c00 	.word	0x40023c00

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fe1f 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 fde7 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000300 	.word	0x20000300

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000300 	.word	0x20000300

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0ed      	b.n	800133a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fc38 	bl	80009e0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff ffb4 	bl	80010ec <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001186:	e012      	b.n	80011ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001188:	f7ff ffb0 	bl	80010ec <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	d90b      	bls.n	80011ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0c5      	b.n	800133a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0e5      	beq.n	8001188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0202 	bic.w	r2, r2, #2
 80011ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff ff8e 	bl	80010ec <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011d2:	e012      	b.n	80011fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d4:	f7ff ff8a 	bl	80010ec <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90b      	bls.n	80011fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2205      	movs	r2, #5
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e09f      	b.n	800133a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e5      	bne.n	80011d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e1b      	ldrb	r3, [r3, #24]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7e5b      	ldrb	r3, [r3, #25]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7e9b      	ldrb	r3, [r3, #26]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0220 	orr.w	r2, r2, #32
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0220 	bic.w	r2, r2, #32
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7edb      	ldrb	r3, [r3, #27]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0210 	bic.w	r2, r2, #16
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7f1b      	ldrb	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0208 	orr.w	r2, r2, #8
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e007      	b.n	80012da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7f5b      	ldrb	r3, [r3, #29]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e007      	b.n	8001304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	ea42 0103 	orr.w	r1, r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d12e      	bne.n	80013b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0201 	bic.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800136e:	f7ff febd 	bl	80010ec <HAL_GetTick>
 8001372:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001374:	e012      	b.n	800139c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001376:	f7ff feb9 	bl	80010ec <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b0a      	cmp	r3, #10
 8001382:	d90b      	bls.n	800139c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2205      	movs	r2, #5
 8001394:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e012      	b.n	80013c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1e5      	bne.n	8001376 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e006      	b.n	80013c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
  }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d133      	bne.n	8001446 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013ee:	f7ff fe7d 	bl	80010ec <HAL_GetTick>
 80013f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f4:	e012      	b.n	800141c <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f6:	f7ff fe79 	bl	80010ec <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d90b      	bls.n	800141c <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2205      	movs	r2, #5
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e01b      	b.n	8001454 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0e5      	beq.n	80013f6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0202 	bic.w	r2, r2, #2
 8001438:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e006      	b.n	8001454 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800147a:	7ffb      	ldrb	r3, [r7, #31]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <HAL_CAN_AddTxMessage+0x2c>
 8001480:	7ffb      	ldrb	r3, [r7, #31]
 8001482:	2b02      	cmp	r3, #2
 8001484:	f040 80ad 	bne.w	80015e2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10a      	bne.n	80014a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8095 	beq.w	80015d2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	0e1b      	lsrs	r3, r3, #24
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10d      	bne.n	80014e0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014ce:	68f9      	ldr	r1, [r7, #12]
 80014d0:	6809      	ldr	r1, [r1, #0]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3318      	adds	r3, #24
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	440b      	add	r3, r1
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e00f      	b.n	8001500 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f0:	68f9      	ldr	r1, [r7, #12]
 80014f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3318      	adds	r3, #24
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	440b      	add	r3, r1
 80014fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3318      	adds	r3, #24
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	440b      	add	r3, r1
 8001510:	3304      	adds	r3, #4
 8001512:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	7d1b      	ldrb	r3, [r3, #20]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d111      	bne.n	8001540 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3318      	adds	r3, #24
 8001524:	011b      	lsls	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	6811      	ldr	r1, [r2, #0]
 8001530:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3318      	adds	r3, #24
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	440b      	add	r3, r1
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3307      	adds	r3, #7
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	061a      	lsls	r2, r3, #24
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3306      	adds	r3, #6
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3305      	adds	r3, #5
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	4313      	orrs	r3, r2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	3204      	adds	r2, #4
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	4610      	mov	r0, r2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	6811      	ldr	r1, [r2, #0]
 8001568:	ea43 0200 	orr.w	r2, r3, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	440b      	add	r3, r1
 8001572:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001576:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3303      	adds	r3, #3
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	061a      	lsls	r2, r3, #24
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	4313      	orrs	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	4610      	mov	r0, r2
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	ea43 0200 	orr.w	r2, r3, r0
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3318      	adds	r3, #24
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	6811      	ldr	r1, [r2, #0]
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3318      	adds	r3, #24
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	440b      	add	r3, r1
 80015cc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e00e      	b.n	80015f0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e006      	b.n	80015f0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
  }
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3724      	adds	r7, #36	@ 0x24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800160c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d002      	beq.n	800161a <HAL_CAN_ActivateNotification+0x1e>
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d109      	bne.n	800162e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6959      	ldr	r1, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e006      	b.n	800163c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d07c      	beq.n	8001788 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f983 	bl	80019b6 <HAL_CAN_TxMailbox0CompleteCallback>
 80016b0:	e016      	b.n	80016e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c4:	e00c      	b.n	80016e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d8:	e002      	b.n	80016e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f989 	bl	80019f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d024      	beq.n	8001734 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f963 	bl	80019ca <HAL_CAN_TxMailbox1CompleteCallback>
 8001704:	e016      	b.n	8001734 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
 8001718:	e00c      	b.n	8001734 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
 800172c:	e002      	b.n	8001734 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f969 	bl	8001a06 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d024      	beq.n	8001788 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001746:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f943 	bl	80019de <HAL_CAN_TxMailbox2CompleteCallback>
 8001758:	e016      	b.n	8001788 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
 800176c:	e00c      	b.n	8001788 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001780:	e002      	b.n	8001788 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f949 	bl	8001a1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00c      	beq.n	80017ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2210      	movs	r2, #16
 80017aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2208      	movs	r2, #8
 80017c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f93a 	bl	8001a42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f921 	bl	8001a2e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00c      	beq.n	8001810 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2210      	movs	r2, #16
 800180e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	f003 0308 	and.w	r3, r3, #8
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2208      	movs	r2, #8
 800182a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f91c 	bl	8001a6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f903 	bl	8001a56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2210      	movs	r2, #16
 800186a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f906 	bl	8001a7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2208      	movs	r2, #8
 800188c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f8ff 	bl	8001a92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d07b      	beq.n	8001996 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d072      	beq.n	800198e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001902:	2b00      	cmp	r3, #0
 8001904:	d043      	beq.n	800198e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d03e      	beq.n	800198e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001916:	2b60      	cmp	r3, #96	@ 0x60
 8001918:	d02b      	beq.n	8001972 <HAL_CAN_IRQHandler+0x32a>
 800191a:	2b60      	cmp	r3, #96	@ 0x60
 800191c:	d82e      	bhi.n	800197c <HAL_CAN_IRQHandler+0x334>
 800191e:	2b50      	cmp	r3, #80	@ 0x50
 8001920:	d022      	beq.n	8001968 <HAL_CAN_IRQHandler+0x320>
 8001922:	2b50      	cmp	r3, #80	@ 0x50
 8001924:	d82a      	bhi.n	800197c <HAL_CAN_IRQHandler+0x334>
 8001926:	2b40      	cmp	r3, #64	@ 0x40
 8001928:	d019      	beq.n	800195e <HAL_CAN_IRQHandler+0x316>
 800192a:	2b40      	cmp	r3, #64	@ 0x40
 800192c:	d826      	bhi.n	800197c <HAL_CAN_IRQHandler+0x334>
 800192e:	2b30      	cmp	r3, #48	@ 0x30
 8001930:	d010      	beq.n	8001954 <HAL_CAN_IRQHandler+0x30c>
 8001932:	2b30      	cmp	r3, #48	@ 0x30
 8001934:	d822      	bhi.n	800197c <HAL_CAN_IRQHandler+0x334>
 8001936:	2b10      	cmp	r3, #16
 8001938:	d002      	beq.n	8001940 <HAL_CAN_IRQHandler+0x2f8>
 800193a:	2b20      	cmp	r3, #32
 800193c:	d005      	beq.n	800194a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800193e:	e01d      	b.n	800197c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001948:	e019      	b.n	800197e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001952:	e014      	b.n	800197e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800195c:	e00f      	b.n	800197e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001966:	e00a      	b.n	800197e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001970:	e005      	b.n	800197e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800197a:	e000      	b.n	800197e <HAL_CAN_IRQHandler+0x336>
            break;
 800197c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699a      	ldr	r2, [r3, #24]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800198c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2204      	movs	r2, #4
 8001994:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f87c 	bl	8001aa6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	@ (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	@ (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	@ (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	@ 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff3e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff8e 	bl	8001bb0 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff31 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa2 	bl	8001c18 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff f9fe 	bl	80010ec <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e099      	b.n	8001e30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1c:	e00f      	b.n	8001d3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1e:	f7ff f9e5 	bl	80010ec <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d908      	bls.n	8001d3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2203      	movs	r2, #3
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e078      	b.n	8001e30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e8      	bne.n	8001d1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_DMA_Init+0x158>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d107      	bne.n	8001da8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	4313      	orrs	r3, r2
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f023 0307 	bic.w	r3, r3, #7
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d117      	bne.n	8001e02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00e      	beq.n	8001e02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fa7b 	bl	80022e0 <DMA_CheckFifoParam>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	@ 0x40
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e016      	b.n	8001e30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fa32 	bl	8002274 <DMA_CalcBaseAndBitshift>
 8001e10:	4603      	mov	r3, r0
 8001e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e18:	223f      	movs	r2, #63	@ 0x3f
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	f010803f 	.word	0xf010803f

08001e3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e4a:	f7ff f94f 	bl	80010ec <HAL_GetTick>
 8001e4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2280      	movs	r2, #128	@ 0x80
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e052      	b.n	8001f14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0216 	bic.w	r2, r2, #22
 8001e7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_DMA_Abort+0x62>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0208 	bic.w	r2, r2, #8
 8001eac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	e013      	b.n	8001ee8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ec0:	f7ff f914 	bl	80010ec <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d90c      	bls.n	8001ee8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e015      	b.n	8001f14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1e4      	bne.n	8001ec0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efa:	223f      	movs	r2, #63	@ 0x3f
 8001efc:	409a      	lsls	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d004      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00c      	b.n	8001f54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80021a8 <HAL_DMA_IRQHandler+0x248>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a8e      	ldr	r2, [pc, #568]	@ (80021ac <HAL_DMA_IRQHandler+0x24c>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01a      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0204 	bic.w	r2, r2, #4
 8001fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb8:	2208      	movs	r2, #8
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d012      	beq.n	8002002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00b      	beq.n	8002002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fee:	2201      	movs	r2, #1
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	f043 0202 	orr.w	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	2204      	movs	r2, #4
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	2204      	movs	r2, #4
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	2210      	movs	r2, #16
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d043      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d03c      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205a:	2210      	movs	r2, #16
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d018      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d108      	bne.n	8002090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d024      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e01f      	b.n	80020d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e016      	b.n	80020d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0208 	bic.w	r2, r2, #8
 80020be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	2220      	movs	r2, #32
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 808f 	beq.w	8002200 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8087 	beq.w	8002200 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f6:	2220      	movs	r2, #32
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b05      	cmp	r3, #5
 8002108:	d136      	bne.n	8002178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0216 	bic.w	r2, r2, #22
 8002118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_DMA_IRQHandler+0x1da>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0208 	bic.w	r2, r2, #8
 8002148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214e:	223f      	movs	r2, #63	@ 0x3f
 8002150:	409a      	lsls	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216a:	2b00      	cmp	r3, #0
 800216c:	d07e      	beq.n	800226c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
        }
        return;
 8002176:	e079      	b.n	800226c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01d      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	2b00      	cmp	r3, #0
 800219a:	d031      	beq.n	8002200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
 80021a4:	e02c      	b.n	8002200 <HAL_DMA_IRQHandler+0x2a0>
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000
 80021ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d023      	beq.n	8002200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e01e      	b.n	8002200 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10f      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0210 	bic.w	r2, r2, #16
 80021de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	2b00      	cmp	r3, #0
 8002206:	d032      	beq.n	800226e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d022      	beq.n	800225a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2205      	movs	r2, #5
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3301      	adds	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	429a      	cmp	r2, r3
 8002236:	d307      	bcc.n	8002248 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f2      	bne.n	800222c <HAL_DMA_IRQHandler+0x2cc>
 8002246:	e000      	b.n	800224a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002248:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
 800226a:	e000      	b.n	800226e <HAL_DMA_IRQHandler+0x30e>
        return;
 800226c:	bf00      	nop
    }
  }
}
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3b10      	subs	r3, #16
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800228e:	4a13      	ldr	r2, [pc, #76]	@ (80022dc <DMA_CalcBaseAndBitshift+0x68>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d909      	bls.n	80022b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	1d1a      	adds	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022b4:	e007      	b.n	80022c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	aaaaaaab 	.word	0xaaaaaaab
 80022dc:	0800ac40 	.word	0x0800ac40

080022e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d11f      	bne.n	800233a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d856      	bhi.n	80023ae <DMA_CheckFifoParam+0xce>
 8002300:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <DMA_CheckFifoParam+0x28>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	08002319 	.word	0x08002319
 800230c:	0800232b 	.word	0x0800232b
 8002310:	08002319 	.word	0x08002319
 8002314:	080023af 	.word	0x080023af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d046      	beq.n	80023b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002328:	e043      	b.n	80023b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002332:	d140      	bne.n	80023b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e03d      	b.n	80023b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002342:	d121      	bne.n	8002388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d837      	bhi.n	80023ba <DMA_CheckFifoParam+0xda>
 800234a:	a201      	add	r2, pc, #4	@ (adr r2, 8002350 <DMA_CheckFifoParam+0x70>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002361 	.word	0x08002361
 8002354:	08002367 	.word	0x08002367
 8002358:	08002361 	.word	0x08002361
 800235c:	08002379 	.word	0x08002379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      break;
 8002364:	e030      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d025      	beq.n	80023be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002376:	e022      	b.n	80023be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002380:	d11f      	bne.n	80023c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002386:	e01c      	b.n	80023c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d903      	bls.n	8002396 <DMA_CheckFifoParam+0xb6>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d003      	beq.n	800239c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002394:	e018      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
      break;
 800239a:	e015      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00e      	beq.n	80023c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      break;
 80023ac:	e00b      	b.n	80023c6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ae:	bf00      	nop
 80023b0:	e00a      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
 80023b4:	e008      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023b6:	bf00      	nop
 80023b8:	e006      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ba:	bf00      	nop
 80023bc:	e004      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
    }
  } 
  
  return status; 
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop

080023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e165      	b.n	80026c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	f040 8154 	bne.w	80026ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d005      	beq.n	800242a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002426:	2b02      	cmp	r3, #2
 8002428:	d130      	bne.n	800248c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 0201 	and.w	r2, r3, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b03      	cmp	r3, #3
 8002496:	d017      	beq.n	80024c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d123      	bne.n	800251c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	220f      	movs	r2, #15
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	08da      	lsrs	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3208      	adds	r2, #8
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80ae 	beq.w	80026ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b5d      	ldr	r3, [pc, #372]	@ (80026d8 <HAL_GPIO_Init+0x300>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	4a5c      	ldr	r2, [pc, #368]	@ (80026d8 <HAL_GPIO_Init+0x300>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800256c:	6453      	str	r3, [r2, #68]	@ 0x44
 800256e:	4b5a      	ldr	r3, [pc, #360]	@ (80026d8 <HAL_GPIO_Init+0x300>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a58      	ldr	r2, [pc, #352]	@ (80026dc <HAL_GPIO_Init+0x304>)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4f      	ldr	r2, [pc, #316]	@ (80026e0 <HAL_GPIO_Init+0x308>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x21a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4e      	ldr	r2, [pc, #312]	@ (80026e4 <HAL_GPIO_Init+0x30c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x216>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4d      	ldr	r2, [pc, #308]	@ (80026e8 <HAL_GPIO_Init+0x310>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x212>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4c      	ldr	r2, [pc, #304]	@ (80026ec <HAL_GPIO_Init+0x314>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x20e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4b      	ldr	r2, [pc, #300]	@ (80026f0 <HAL_GPIO_Init+0x318>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x20a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4a      	ldr	r2, [pc, #296]	@ (80026f4 <HAL_GPIO_Init+0x31c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x206>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	@ (80026f8 <HAL_GPIO_Init+0x320>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x202>
 80025d6:	2306      	movs	r3, #6
 80025d8:	e00c      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025da:	2307      	movs	r3, #7
 80025dc:	e00a      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025de:	2305      	movs	r3, #5
 80025e0:	e008      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025e2:	2304      	movs	r3, #4
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025e6:	2303      	movs	r3, #3
 80025e8:	e004      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_GPIO_Init+0x21c>
 80025f2:	2300      	movs	r3, #0
 80025f4:	69fa      	ldr	r2, [r7, #28]
 80025f6:	f002 0203 	and.w	r2, r2, #3
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	4093      	lsls	r3, r2
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002604:	4935      	ldr	r1, [pc, #212]	@ (80026dc <HAL_GPIO_Init+0x304>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002612:	4b3a      	ldr	r3, [pc, #232]	@ (80026fc <HAL_GPIO_Init+0x324>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002636:	4a31      	ldr	r2, [pc, #196]	@ (80026fc <HAL_GPIO_Init+0x324>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800263c:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <HAL_GPIO_Init+0x324>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <HAL_GPIO_Init+0x324>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002666:	4b25      	ldr	r3, [pc, #148]	@ (80026fc <HAL_GPIO_Init+0x324>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268a:	4a1c      	ldr	r2, [pc, #112]	@ (80026fc <HAL_GPIO_Init+0x324>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_GPIO_Init+0x324>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b4:	4a11      	ldr	r2, [pc, #68]	@ (80026fc <HAL_GPIO_Init+0x324>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3301      	adds	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b0f      	cmp	r3, #15
 80026c4:	f67f ae96 	bls.w	80023f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40013800 	.word	0x40013800
 80026e0:	40020000 	.word	0x40020000
 80026e4:	40020400 	.word	0x40020400
 80026e8:	40020800 	.word	0x40020800
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40021400 	.word	0x40021400
 80026f8:	40021800 	.word	0x40021800
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002744:	887a      	ldrh	r2, [r7, #2]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43d9      	mvns	r1, r3
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	400b      	ands	r3, r1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af02      	add	r7, sp, #8
 800276c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e108      	b.n	800298a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f007 fbd0 	bl	8009f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027a6:	d102      	bne.n	80027ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fe97 	bl	80074e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7c1a      	ldrb	r2, [r3, #16]
 80027c0:	f88d 2000 	strb.w	r2, [sp]
 80027c4:	3304      	adds	r3, #4
 80027c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c8:	f004 fd76 	bl	80072b8 <USB_CoreInit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0d5      	b.n	800298a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 fe8f 	bl	8007508 <USB_SetCurrentMode>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0c6      	b.n	800298a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e04a      	b.n	8002898 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3315      	adds	r3, #21
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3314      	adds	r3, #20
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	b298      	uxth	r0, r3
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	332e      	adds	r3, #46	@ 0x2e
 800283e:	4602      	mov	r2, r0
 8002840:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3318      	adds	r3, #24
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	331c      	adds	r3, #28
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3320      	adds	r3, #32
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	3324      	adds	r3, #36	@ 0x24
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	3301      	adds	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	791b      	ldrb	r3, [r3, #4]
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3af      	bcc.n	8002802 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e044      	b.n	8002932 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028d4:	7bfa      	ldrb	r2, [r7, #15]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	3301      	adds	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	791b      	ldrb	r3, [r3, #4]
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3b5      	bcc.n	80028a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7c1a      	ldrb	r2, [r3, #16]
 8002944:	f88d 2000 	strb.w	r2, [sp]
 8002948:	3304      	adds	r3, #4
 800294a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294c:	f004 fe28 	bl	80075a0 <USB_DevInit>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e013      	b.n	800298a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7b1b      	ldrb	r3, [r3, #12]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f001 f957 	bl	8003c2c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f005 fe65 	bl	8008652 <USB_DevDisconnect>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_PCD_Start+0x1c>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e022      	b.n	80029f4 <HAL_PCD_Start+0x62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fd72 	bl	80074c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f005 fe13 	bl	8008610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b08d      	sub	sp, #52	@ 0x34
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f005 fed1 	bl	80087ba <USB_GetMode>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 84b9 	bne.w	8003392 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f005 fe35 	bl	8008694 <USB_ReadInterrupts>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 84af 	beq.w	8003390 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f005 fe22 	bl	8008694 <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f002 0202 	and.w	r2, r2, #2
 8002a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f005 fe10 	bl	8008694 <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d161      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0210 	bic.w	r2, r2, #16
 8002a8c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3304      	adds	r3, #4
 8002aac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002ab4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ab8:	d124      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d035      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6a38      	ldr	r0, [r7, #32]
 8002ada:	f005 fc47 	bl	800836c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aea:	441a      	add	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afc:	441a      	add	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	615a      	str	r2, [r3, #20]
 8002b02:	e016      	b.n	8002b32 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002b0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b0e:	d110      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b16:	2208      	movs	r2, #8
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6a38      	ldr	r0, [r7, #32]
 8002b1c:	f005 fc26 	bl	800836c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2c:	441a      	add	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0210 	orr.w	r2, r2, #16
 8002b40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 fda4 	bl	8008694 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b56:	f040 80a7 	bne.w	8002ca8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 fda9 	bl	80086ba <USB_ReadDevAllOutEpInterrupt>
 8002b68:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b6a:	e099      	b.n	8002ca0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808e 	beq.w	8002c94 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f005 fdcd 	bl	8008722 <USB_ReadDevOutEPInterrupt>
 8002b88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ba6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 feb9 	bl	8003920 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 ff8f 	bl	8003af0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be8:	461a      	mov	r2, r3
 8002bea:	2310      	movs	r3, #16
 8002bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d030      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c00:	2b80      	cmp	r3, #128	@ 0x80
 8002c02:	d109      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c16:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	78db      	ldrb	r3, [r3, #3]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d108      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f007 fa7e 	bl	800a144 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	2302      	movs	r3, #2
 8002c58:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c70:	461a      	mov	r2, r3
 8002c72:	2320      	movs	r3, #32
 8002c74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c92:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f47f af62 	bne.w	8002b6c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f005 fcf1 	bl	8008694 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cbc:	f040 80db 	bne.w	8002e76 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f005 fd12 	bl	80086ee <USB_ReadDevAllInEpInterrupt>
 8002cca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cd0:	e0cd      	b.n	8002e6e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80c2 	beq.w	8002e62 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f005 fd38 	bl	800875e <USB_ReadDevInEPInterrupt>
 8002cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d057      	beq.n	8002daa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	2201      	movs	r2, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69f9      	ldr	r1, [r7, #28]
 8002d16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	799b      	ldrb	r3, [r3, #6]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d132      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3320      	adds	r3, #32
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4403      	add	r3, r0
 8002d58:	331c      	adds	r3, #28
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4419      	add	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4403      	add	r3, r0
 8002d6c:	3320      	adds	r3, #32
 8002d6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d113      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x3a2>
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3324      	adds	r3, #36	@ 0x24
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d108      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d96:	461a      	mov	r2, r3
 8002d98:	2101      	movs	r1, #1
 8002d9a:	f005 fd3f 	bl	800881c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f007 f948 	bl	800a03a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2340      	movs	r3, #64	@ 0x40
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d023      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0a:	6a38      	ldr	r0, [r7, #32]
 8002e0c:	f004 fd26 	bl	800785c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	78db      	ldrb	r3, [r3, #3]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d108      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f007 f995 	bl	800a168 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fcd2 	bl	8003806 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	3301      	adds	r3, #1
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af2e 	bne.w	8002cd2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f005 fc0a 	bl	8008694 <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e8a:	d122      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f007 fafd 	bl	800a4b4 <HAL_PCDEx_LPM_Callback>
 8002eba:	e002      	b.n	8002ec2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f007 f933 	bl	800a128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f005 fbdc 	bl	8008694 <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ee6:	d112      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d102      	bne.n	8002efe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f007 f8ef 	bl	800a0dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f0c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f005 fbbe 	bl	8008694 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f22:	d121      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002f32:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d111      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f007 faaa 	bl	800a4b4 <HAL_PCDEx_LPM_Callback>
 8002f60:	e002      	b.n	8002f68 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f007 f8ba 	bl	800a0dc <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 fb91 	bl	8008694 <USB_ReadInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f7c:	f040 80b7 	bne.w	80030ee <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2110      	movs	r1, #16
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 fc5e 	bl	800785c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa4:	e046      	b.n	8003034 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fca:	0151      	lsls	r1, r2, #5
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	440a      	add	r2, r1
 8002fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	440a      	add	r2, r1
 8003004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003008:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800300c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	440a      	add	r2, r1
 8003024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003028:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800302c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	3301      	adds	r3, #1
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	461a      	mov	r2, r3
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	4293      	cmp	r3, r2
 800303e:	d3b2      	bcc.n	8002fa6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800304e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003052:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7bdb      	ldrb	r3, [r3, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800306c:	f043 030b 	orr.w	r3, r3, #11
 8003070:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800307a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003082:	f043 030b 	orr.w	r3, r3, #11
 8003086:	6453      	str	r3, [r2, #68]	@ 0x44
 8003088:	e015      	b.n	80030b6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003098:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800309c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030b0:	f043 030b 	orr.w	r3, r3, #11
 80030b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030d8:	461a      	mov	r2, r3
 80030da:	f005 fb9f 	bl	800881c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80030ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 face 	bl	8008694 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003102:	d123      	bne.n	800314c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f005 fb64 	bl	80087d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f004 fc1b 	bl	800794e <USB_GetDevSpeed>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681c      	ldr	r4, [r3, #0]
 8003124:	f000 fedc 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003128:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800312e:	461a      	mov	r2, r3
 8003130:	4620      	mov	r0, r4
 8003132:	f004 f925 	bl	8007380 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f006 ffa7 	bl	800a08a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800314a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f005 fa9f 	bl	8008694 <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b08      	cmp	r3, #8
 800315e:	d10a      	bne.n	8003176 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f006 ff84 	bl	800a06e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f002 0208 	and.w	r2, r2, #8
 8003174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f005 fa8a 	bl	8008694 <USB_ReadInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003186:	2b80      	cmp	r3, #128	@ 0x80
 8003188:	d123      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003196:	2301      	movs	r3, #1
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
 800319a:	e014      	b.n	80031c6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 faf2 	bl	80037a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	3301      	adds	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	791b      	ldrb	r3, [r3, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d3e4      	bcc.n	800319c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f005 fa5c 	bl	8008694 <USB_ReadInterrupts>
 80031dc:	4603      	mov	r3, r0
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031e6:	d13c      	bne.n	8003262 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e8:	2301      	movs	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ec:	e02b      	b.n	8003246 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3318      	adds	r3, #24
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d115      	bne.n	8003240 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003214:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003216:	2b00      	cmp	r3, #0
 8003218:	da12      	bge.n	8003240 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3317      	adds	r3, #23
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003236:	b2db      	uxtb	r3, r3
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fab2 	bl	80037a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	3301      	adds	r3, #1
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	791b      	ldrb	r3, [r3, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	4293      	cmp	r3, r2
 8003250:	d3cd      	bcc.n	80031ee <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 fa14 	bl	8008694 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003276:	d156      	bne.n	8003326 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
 800327c:	e045      	b.n	800330a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12e      	bne.n	8003304 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da2b      	bge.n	8003304 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80032b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032bc:	429a      	cmp	r2, r3
 80032be:	d121      	bne.n	8003304 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003300:	6053      	str	r3, [r2, #4]
            break;
 8003302:	e008      	b.n	8003316 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	3301      	adds	r3, #1
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	4293      	cmp	r3, r2
 8003314:	d3b3      	bcc.n	800327e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f005 f9b2 	bl	8008694 <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333a:	d10a      	bne.n	8003352 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f006 ff25 	bl	800a18c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f005 f99c 	bl	8008694 <USB_ReadInterrupts>
 800335c:	4603      	mov	r3, r0
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d115      	bne.n	8003392 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f006 ff15 	bl	800a1a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	e000      	b.n	8003392 <HAL_PCD_IRQHandler+0x996>
      return;
 8003390:	bf00      	nop
    }
  }
}
 8003392:	3734      	adds	r7, #52	@ 0x34
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}

08003398 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_PCD_SetAddress+0x1a>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e012      	b.n	80033d8 <HAL_PCD_SetAddress+0x40>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 f8fb 	bl	80085c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	70fb      	strb	r3, [r7, #3]
 80033f2:	460b      	mov	r3, r1
 80033f4:	803b      	strh	r3, [r7, #0]
 80033f6:	4613      	mov	r3, r2
 80033f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003402:	2b00      	cmp	r3, #0
 8003404:	da0f      	bge.n	8003426 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3310      	adds	r3, #16
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	705a      	strb	r2, [r3, #1]
 8003424:	e00f      	b.n	8003446 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003452:	883b      	ldrh	r3, [r7, #0]
 8003454:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	78ba      	ldrb	r2, [r7, #2]
 8003460:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	785b      	ldrb	r3, [r3, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003474:	78bb      	ldrb	r3, [r7, #2]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d102      	bne.n	8003480 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_PCD_EP_Open+0xae>
 800348a:	2302      	movs	r3, #2
 800348c:	e00e      	b.n	80034ac <HAL_PCD_EP_Open+0xcc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	4618      	mov	r0, r3
 800349e:	f004 fa7b 	bl	8007998 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034aa:	7afb      	ldrb	r3, [r7, #11]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da0f      	bge.n	80034e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	3310      	adds	r3, #16
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	705a      	strb	r2, [r3, #1]
 80034e6:	e00f      	b.n	8003508 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	f003 020f 	and.w	r2, r3, #15
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	3304      	adds	r3, #4
 8003500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_PCD_EP_Close+0x6e>
 800351e:	2302      	movs	r3, #2
 8003520:	e00e      	b.n	8003540 <HAL_PCD_EP_Close+0x8c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fab9 	bl	8007aa8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	460b      	mov	r3, r1
 8003556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003558:	7afb      	ldrb	r3, [r7, #11]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	799b      	ldrb	r3, [r3, #6]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	799b      	ldrb	r3, [r3, #6]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6979      	ldr	r1, [r7, #20]
 80035b0:	f004 fb56 	bl	8007c60 <USB_EPStartXfer>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	460b      	mov	r3, r1
 80035cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	3310      	adds	r3, #16
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2201      	movs	r2, #1
 80035fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	b2da      	uxtb	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	799b      	ldrb	r3, [r3, #6]
 8003620:	461a      	mov	r2, r3
 8003622:	6979      	ldr	r1, [r7, #20]
 8003624:	f004 fb1c 	bl	8007c60 <USB_EPStartXfer>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	7912      	ldrb	r2, [r2, #4]
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e04f      	b.n	80036f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003654:	2b00      	cmp	r3, #0
 8003656:	da0f      	bge.n	8003678 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 020f 	and.w	r2, r3, #15
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	3310      	adds	r3, #16
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	705a      	strb	r2, [r3, #1]
 8003676:	e00d      	b.n	8003694 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	3304      	adds	r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_PCD_EP_SetStall+0x82>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e01d      	b.n	80036f0 <HAL_PCD_EP_SetStall+0xbe>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 feaa 	bl	800841c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	7999      	ldrb	r1, [r3, #6]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e0:	461a      	mov	r2, r3
 80036e2:	f005 f89b 	bl	800881c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	7912      	ldrb	r2, [r2, #4]
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e042      	b.n	800379c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800371a:	2b00      	cmp	r3, #0
 800371c:	da0f      	bge.n	800373e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3310      	adds	r3, #16
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]
 800373c:	e00f      	b.n	800375e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_PCD_EP_ClrStall+0x86>
 800377a:	2302      	movs	r3, #2
 800377c:	e00e      	b.n	800379c <HAL_PCD_EP_ClrStall+0xa4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	4618      	mov	r0, r3
 800378e:	f004 feb3 	bl	80084f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da0c      	bge.n	80037d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	3310      	adds	r3, #16
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e00c      	b.n	80037ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 020f 	and.w	r2, r3, #15
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68f9      	ldr	r1, [r7, #12]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 fcd2 	bl	800819c <USB_EPStopXfer>
 80037f8:	4603      	mov	r3, r0
 80037fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80037fc:	7afb      	ldrb	r3, [r7, #11]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08a      	sub	sp, #40	@ 0x28
 800380a:	af02      	add	r7, sp, #8
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3310      	adds	r3, #16
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	d901      	bls.n	800383e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06b      	b.n	8003916 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	429a      	cmp	r2, r3
 8003852:	d902      	bls.n	800385a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3303      	adds	r3, #3
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003862:	e02a      	b.n	80038ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	429a      	cmp	r2, r3
 8003878:	d902      	bls.n	8003880 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3303      	adds	r3, #3
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68d9      	ldr	r1, [r3, #12]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	4603      	mov	r3, r0
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f004 fd27 	bl	80082f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	441a      	add	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	441a      	add	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d809      	bhi.n	80038e4 <PCD_WriteEmptyTxFifo+0xde>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d8:	429a      	cmp	r2, r3
 80038da:	d203      	bcs.n	80038e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1bf      	bne.n	8003864 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d811      	bhi.n	8003914 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	2201      	movs	r2, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	43db      	mvns	r3, r3
 800390a:	6939      	ldr	r1, [r7, #16]
 800390c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003910:	4013      	ands	r3, r2
 8003912:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	333c      	adds	r3, #60	@ 0x3c
 8003938:	3304      	adds	r3, #4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	799b      	ldrb	r3, [r3, #6]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d17b      	bne.n	8003a4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	4a61      	ldr	r2, [pc, #388]	@ (8003ae8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f240 80b9 	bls.w	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80b3 	beq.w	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003982:	461a      	mov	r2, r3
 8003984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003988:	6093      	str	r3, [r2, #8]
 800398a:	e0a7      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	2320      	movs	r3, #32
 80039a6:	6093      	str	r3, [r2, #8]
 80039a8:	e098      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 8093 	bne.w	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ae8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d90f      	bls.n	80039de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039da:	6093      	str	r3, [r2, #8]
 80039dc:	e07e      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	0159      	lsls	r1, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	440b      	add	r3, r1
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a0a:	1ad2      	subs	r2, r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d114      	bne.n	8003a40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	f004 fef6 	bl	800881c <USB_EP0_OutStart>
 8003a30:	e006      	b.n	8003a40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f006 fadc 	bl	800a004 <HAL_PCD_DataOutStageCallback>
 8003a4c:	e046      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	4a26      	ldr	r2, [pc, #152]	@ (8003aec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d124      	bne.n	8003aa0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a72:	6093      	str	r3, [r2, #8]
 8003a74:	e032      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2320      	movs	r3, #32
 8003a90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f006 fab3 	bl	800a004 <HAL_PCD_DataOutStageCallback>
 8003a9e:	e01d      	b.n	8003adc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2100      	movs	r1, #0
 8003acc:	f004 fea6 	bl	800881c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f006 fa94 	bl	800a004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	4f54300a 	.word	0x4f54300a
 8003aec:	4f54310a 	.word	0x4f54310a

08003af0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	333c      	adds	r3, #60	@ 0x3c
 8003b08:	3304      	adds	r3, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d90e      	bls.n	8003b44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f006 fa4b 	bl	8009fe0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d90c      	bls.n	8003b6c <PCD_EP_OutSetupPacket_int+0x7c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	799b      	ldrb	r3, [r3, #6]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d108      	bne.n	8003b6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b64:	461a      	mov	r2, r3
 8003b66:	2101      	movs	r1, #1
 8003b68:	f004 fe58 	bl	800881c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	4f54300a 	.word	0x4f54300a

08003b7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b9a:	883b      	ldrh	r3, [r7, #0]
 8003b9c:	0419      	lsls	r1, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ba8:	e028      	b.n	8003bfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e00d      	b.n	8003bda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	3340      	adds	r3, #64	@ 0x40
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3ec      	bcc.n	8003bbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003be4:	883b      	ldrh	r3, [r7, #0]
 8003be6:	0418      	lsls	r0, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6819      	ldr	r1, [r3, #0]
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	4302      	orrs	r2, r0
 8003bf4:	3340      	adds	r3, #64	@ 0x40
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	f043 0303 	orr.w	r3, r3, #3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fa24 	bl	80010ec <HAL_GetTick>
 8003ca4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ca6:	e009      	b.n	8003cbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ca8:	f7fd fa20 	bl	80010ec <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cb6:	d901      	bls.n	8003cbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e01f      	b.n	8003cfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cbc:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cca:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cd0:	f7fd fa0c 	bl	80010ec <HAL_GetTick>
 8003cd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cd6:	e009      	b.n	8003cec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cd8:	f7fd fa08 	bl	80010ec <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ce6:	d901      	bls.n	8003cec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e007      	b.n	8003cfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf8:	d1ee      	bne.n	8003cd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40023800 	.word	0x40023800
 8003d08:	420e0040 	.word	0x420e0040
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	420e0044 	.word	0x420e0044

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0cc      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d90c      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b65      	ldr	r3, [pc, #404]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b63      	ldr	r3, [pc, #396]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b59      	ldr	r3, [pc, #356]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d80:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a52      	ldr	r2, [pc, #328]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b50      	ldr	r3, [pc, #320]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	494d      	ldr	r1, [pc, #308]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d044      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d119      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e067      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4934      	ldr	r1, [pc, #208]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fd f972 	bl	80010ec <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd f96e 	bl	80010ec <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e04f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d20c      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4916      	ldr	r1, [pc, #88]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e86:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490e      	ldr	r1, [pc, #56]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9a:	f000 fb7f 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490a      	ldr	r1, [pc, #40]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd f8d2 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023c00 	.word	0x40023c00
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	0800ac28 	.word	0x0800ac28
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000000 	.word	0x20000000

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003efc:	f7ff fff0 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	0800ac38 	.word	0x0800ac38

08003f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f24:	f7ff ffdc 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0b5b      	lsrs	r3, r3, #13
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	0800ac38 	.word	0x0800ac38

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f80:	4b6f      	ldr	r3, [pc, #444]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f86:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	496c      	ldr	r1, [pc, #432]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003fae:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	4960      	ldr	r1, [pc, #384]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d017      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fdc:	4b58      	ldr	r3, [pc, #352]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	4955      	ldr	r1, [pc, #340]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffa:	d101      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004008:	2301      	movs	r3, #1
 800400a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004018:	4b49      	ldr	r3, [pc, #292]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800401a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800401e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	4946      	ldr	r1, [pc, #280]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004032:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004036:	d101      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004038:	2301      	movs	r3, #1
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004044:	2301      	movs	r3, #1
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 808a 	beq.w	800416a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	4a38      	ldr	r2, [pc, #224]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	@ 0x40
 8004066:	4b36      	ldr	r3, [pc, #216]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406e:	60bb      	str	r3, [r7, #8]
 8004070:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004072:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a33      	ldr	r2, [pc, #204]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800407e:	f7fd f835 	bl	80010ec <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004084:	e008      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fd f831 	bl	80010ec <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e278      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0f0      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a4:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ac:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d028      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004148 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040d8:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040de:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d114      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fc ffff 	bl	80010ec <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fc fffb 	bl	80010ec <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e240      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004120:	d114      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004122:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004136:	4902      	ldr	r1, [pc, #8]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
 800413c:	e00c      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800
 8004144:	40007000 	.word	0x40007000
 8004148:	42470e40 	.word	0x42470e40
 800414c:	4b4a      	ldr	r3, [pc, #296]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a49      	ldr	r2, [pc, #292]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004152:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004156:	6093      	str	r3, [r2, #8]
 8004158:	4b47      	ldr	r3, [pc, #284]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800415a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	4944      	ldr	r1, [pc, #272]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004166:	4313      	orrs	r3, r2
 8004168:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800417c:	4b3f      	ldr	r3, [pc, #252]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800417e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800418c:	4b3a      	ldr	r3, [pc, #232]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004192:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	4937      	ldr	r1, [pc, #220]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ae:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041bc:	492e      	ldr	r1, [pc, #184]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d011      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041d0:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	4926      	ldr	r1, [pc, #152]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ee:	d101      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004200:	4b1d      	ldr	r3, [pc, #116]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004206:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	491a      	ldr	r1, [pc, #104]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004222:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004228:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004230:	4911      	ldr	r1, [pc, #68]	@ (8004278 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004240:	d101      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004242:	2301      	movs	r3, #1
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d005      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004254:	f040 80ff 	bne.w	8004456 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004258:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800425e:	f7fc ff45 	bl	80010ec <HAL_GetTick>
 8004262:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004264:	e00e      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004266:	f7fc ff41 	bl	80010ec <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d907      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e188      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004278:	40023800 	.word	0x40023800
 800427c:	424711e0 	.word	0x424711e0
 8004280:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004284:	4b7e      	ldr	r3, [pc, #504]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ea      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d028      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d124      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042b8:	4b71      	ldr	r3, [pc, #452]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	3301      	adds	r3, #1
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d0:	0e1b      	lsrs	r3, r3, #24
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	019b      	lsls	r3, r3, #6
 80042e2:	431a      	orrs	r2, r3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	3b01      	subs	r3, #1
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	431a      	orrs	r2, r3
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	071b      	lsls	r3, r3, #28
 80042fa:	4961      	ldr	r1, [pc, #388]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004320:	2b00      	cmp	r3, #0
 8004322:	d035      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432c:	d130      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800432e:	4b54      	ldr	r3, [pc, #336]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004340:	4b4f      	ldr	r3, [pc, #316]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004346:	0f1b      	lsrs	r3, r3, #28
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	019b      	lsls	r3, r3, #6
 8004358:	431a      	orrs	r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	3b01      	subs	r3, #1
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	431a      	orrs	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	071b      	lsls	r3, r3, #28
 8004370:	4943      	ldr	r1, [pc, #268]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004378:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800437e:	f023 021f 	bic.w	r2, r3, #31
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	493d      	ldr	r1, [pc, #244]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d029      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043a4:	d124      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80043a6:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ac:	0c1b      	lsrs	r3, r3, #16
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043b8:	4b31      	ldr	r3, [pc, #196]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043be:	0f1b      	lsrs	r3, r3, #28
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	019b      	lsls	r3, r3, #6
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	3b01      	subs	r3, #1
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	431a      	orrs	r2, r3
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	071b      	lsls	r3, r3, #28
 80043e8:	4925      	ldr	r1, [pc, #148]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d016      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	071b      	lsls	r3, r3, #28
 8004422:	4917      	ldr	r1, [pc, #92]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800442a:	4b16      	ldr	r3, [pc, #88]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004430:	f7fc fe5c 	bl	80010ec <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004438:	f7fc fe58 	bl	80010ec <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e09f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 8095 	bne.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004464:	f7fc fe42 	bl	80010ec <HAL_GetTick>
 8004468:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800446a:	e00f      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800446c:	f7fc fe3e 	bl	80010ec <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d908      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e085      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800
 8004484:	42470068 	.word	0x42470068
 8004488:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800448c:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004498:	d0e8      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d02b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d127      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044c2:	4b34      	ldr	r3, [pc, #208]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	019b      	lsls	r3, r3, #6
 80044de:	431a      	orrs	r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	085b      	lsrs	r3, r3, #1
 80044e4:	3b01      	subs	r3, #1
 80044e6:	041b      	lsls	r3, r3, #16
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	4928      	ldr	r1, [pc, #160]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044f8:	4b26      	ldr	r3, [pc, #152]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044fe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	3b01      	subs	r3, #1
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	4922      	ldr	r1, [pc, #136]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01d      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004526:	d118      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004528:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	0e1b      	lsrs	r3, r3, #24
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	019b      	lsls	r3, r3, #6
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	085b      	lsrs	r3, r3, #1
 8004548:	3b01      	subs	r3, #1
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	4910      	ldr	r1, [pc, #64]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800455a:	4b0f      	ldr	r3, [pc, #60]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004560:	f7fc fdc4 	bl	80010ec <HAL_GetTick>
 8004564:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004568:	f7fc fdc0 	bl	80010ec <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e007      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800457a:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004586:	d1ef      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	@ 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
 8004598:	42470070 	.word	0x42470070

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b0a6      	sub	sp, #152	@ 0x98
 80045a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c2:	4bc8      	ldr	r3, [pc, #800]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	f200 817e 	bhi.w	80048cc <HAL_RCC_GetSysClockFreq+0x330>
 80045d0:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	0800460d 	.word	0x0800460d
 80045dc:	080048cd 	.word	0x080048cd
 80045e0:	080048cd 	.word	0x080048cd
 80045e4:	080048cd 	.word	0x080048cd
 80045e8:	08004615 	.word	0x08004615
 80045ec:	080048cd 	.word	0x080048cd
 80045f0:	080048cd 	.word	0x080048cd
 80045f4:	080048cd 	.word	0x080048cd
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	080048cd 	.word	0x080048cd
 8004600:	080048cd 	.word	0x080048cd
 8004604:	080048cd 	.word	0x080048cd
 8004608:	08004787 	.word	0x08004787
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4bb6      	ldr	r3, [pc, #728]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800460e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004612:	e15f      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004614:	4bb5      	ldr	r3, [pc, #724]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x350>)
 8004616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800461a:	e15b      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800461c:	4bb1      	ldr	r3, [pc, #708]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004628:	4bae      	ldr	r3, [pc, #696]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d031      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004634:	4bab      	ldr	r3, [pc, #684]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	2200      	movs	r2, #0
 800463c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	663b      	str	r3, [r7, #96]	@ 0x60
 8004648:	2300      	movs	r3, #0
 800464a:	667b      	str	r3, [r7, #100]	@ 0x64
 800464c:	4ba7      	ldr	r3, [pc, #668]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x350>)
 800464e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004652:	462a      	mov	r2, r5
 8004654:	fb03 f202 	mul.w	r2, r3, r2
 8004658:	2300      	movs	r3, #0
 800465a:	4621      	mov	r1, r4
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	4aa2      	ldr	r2, [pc, #648]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x350>)
 8004664:	4621      	mov	r1, r4
 8004666:	fba1 1202 	umull	r1, r2, r1, r2
 800466a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800466c:	460a      	mov	r2, r1
 800466e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004670:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004672:	4413      	add	r3, r2
 8004674:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800467a:	2200      	movs	r2, #0
 800467c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800467e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004684:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004688:	f7fb fdbc 	bl	8000204 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004696:	e064      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004698:	4b92      	ldr	r3, [pc, #584]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	2200      	movs	r2, #0
 80046a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a2:	657a      	str	r2, [r7, #84]	@ 0x54
 80046a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ac:	2300      	movs	r3, #0
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80046b4:	4622      	mov	r2, r4
 80046b6:	462b      	mov	r3, r5
 80046b8:	f04f 0000 	mov.w	r0, #0
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	0159      	lsls	r1, r3, #5
 80046c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c6:	0150      	lsls	r0, r2, #5
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4621      	mov	r1, r4
 80046ce:	1a51      	subs	r1, r2, r1
 80046d0:	6139      	str	r1, [r7, #16]
 80046d2:	4629      	mov	r1, r5
 80046d4:	eb63 0301 	sbc.w	r3, r3, r1
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e6:	4659      	mov	r1, fp
 80046e8:	018b      	lsls	r3, r1, #6
 80046ea:	4651      	mov	r1, sl
 80046ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046f0:	4651      	mov	r1, sl
 80046f2:	018a      	lsls	r2, r1, #6
 80046f4:	4651      	mov	r1, sl
 80046f6:	ebb2 0801 	subs.w	r8, r2, r1
 80046fa:	4659      	mov	r1, fp
 80046fc:	eb63 0901 	sbc.w	r9, r3, r1
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800470c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004710:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004714:	4690      	mov	r8, r2
 8004716:	4699      	mov	r9, r3
 8004718:	4623      	mov	r3, r4
 800471a:	eb18 0303 	adds.w	r3, r8, r3
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	462b      	mov	r3, r5
 8004722:	eb49 0303 	adc.w	r3, r9, r3
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004734:	4629      	mov	r1, r5
 8004736:	028b      	lsls	r3, r1, #10
 8004738:	4621      	mov	r1, r4
 800473a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800473e:	4621      	mov	r1, r4
 8004740:	028a      	lsls	r2, r1, #10
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800474a:	2200      	movs	r2, #0
 800474c:	643b      	str	r3, [r7, #64]	@ 0x40
 800474e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004754:	f7fb fd56 	bl	8000204 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004762:	4b60      	ldr	r3, [pc, #384]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	3301      	adds	r3, #1
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8004774:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004784:	e0a6      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004786:	4b57      	ldr	r3, [pc, #348]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800478e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004792:	4b54      	ldr	r3, [pc, #336]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02a      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479e:	4b51      	ldr	r3, [pc, #324]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	2200      	movs	r2, #0
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047b0:	2100      	movs	r1, #0
 80047b2:	4b4e      	ldr	r3, [pc, #312]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x350>)
 80047b4:	fb03 f201 	mul.w	r2, r3, r1
 80047b8:	2300      	movs	r3, #0
 80047ba:	fb00 f303 	mul.w	r3, r0, r3
 80047be:	4413      	add	r3, r2
 80047c0:	4a4a      	ldr	r2, [pc, #296]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x350>)
 80047c2:	fba0 1202 	umull	r1, r2, r0, r2
 80047c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80047c8:	460a      	mov	r2, r1
 80047ca:	673a      	str	r2, [r7, #112]	@ 0x70
 80047cc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80047ce:	4413      	add	r3, r2
 80047d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80047d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047d6:	2200      	movs	r2, #0
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047da:	637a      	str	r2, [r7, #52]	@ 0x34
 80047dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80047e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80047e4:	f7fb fd0e 	bl	8000204 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047f2:	e05b      	b.n	80048ac <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f4:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	2200      	movs	r2, #0
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	2300      	movs	r3, #0
 800480a:	627b      	str	r3, [r7, #36]	@ 0x24
 800480c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	f04f 0000 	mov.w	r0, #0
 8004818:	f04f 0100 	mov.w	r1, #0
 800481c:	0159      	lsls	r1, r3, #5
 800481e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004822:	0150      	lsls	r0, r2, #5
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4641      	mov	r1, r8
 800482a:	ebb2 0a01 	subs.w	sl, r2, r1
 800482e:	4649      	mov	r1, r9
 8004830:	eb63 0b01 	sbc.w	fp, r3, r1
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004848:	ebb2 040a 	subs.w	r4, r2, sl
 800484c:	eb63 050b 	sbc.w	r5, r3, fp
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	00eb      	lsls	r3, r5, #3
 800485a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485e:	00e2      	lsls	r2, r4, #3
 8004860:	4614      	mov	r4, r2
 8004862:	461d      	mov	r5, r3
 8004864:	4643      	mov	r3, r8
 8004866:	18e3      	adds	r3, r4, r3
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	464b      	mov	r3, r9
 800486c:	eb45 0303 	adc.w	r3, r5, r3
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800487e:	4629      	mov	r1, r5
 8004880:	028b      	lsls	r3, r1, #10
 8004882:	4621      	mov	r1, r4
 8004884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004888:	4621      	mov	r1, r4
 800488a:	028a      	lsls	r2, r1, #10
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004894:	2200      	movs	r2, #0
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	61fa      	str	r2, [r7, #28]
 800489a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800489e:	f7fb fcb1 	bl	8000204 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4613      	mov	r3, r2
 80048a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048ac:	4b0d      	ldr	r3, [pc, #52]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x348>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	0f1b      	lsrs	r3, r3, #28
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80048ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80048ca:	e003      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80048d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3798      	adds	r7, #152	@ 0x98
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	00b71b00 	.word	0x00b71b00

080048f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e28d      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 8083 	beq.w	8004a16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004910:	4b94      	ldr	r3, [pc, #592]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b04      	cmp	r3, #4
 800491a:	d019      	beq.n	8004950 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800491c:	4b91      	ldr	r3, [pc, #580]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
        || \
 8004924:	2b08      	cmp	r3, #8
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004928:	4b8e      	ldr	r3, [pc, #568]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4b8b      	ldr	r3, [pc, #556]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b88      	ldr	r3, [pc, #544]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b84      	ldr	r3, [pc, #528]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x124>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e25a      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x90>
 8004972:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7b      	ldr	r2, [pc, #492]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xcc>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0xb4>
 800498a:	4b76      	ldr	r3, [pc, #472]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a75      	ldr	r2, [pc, #468]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b73      	ldr	r3, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a72      	ldr	r2, [pc, #456]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xcc>
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fc fb92 	bl	80010ec <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fc fb8e 	bl	80010ec <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e21f      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b61      	ldr	r3, [pc, #388]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xdc>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fc fb7e 	bl	80010ec <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fc fb7a 	bl	80010ec <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e20b      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b57      	ldr	r3, [pc, #348]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x104>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06f      	beq.n	8004b02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a22:	4b50      	ldr	r3, [pc, #320]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d017      	beq.n	8004a5e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
        || \
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d105      	bne.n	8004a46 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d11c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a52:	4b44      	ldr	r3, [pc, #272]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d116      	bne.n	8004a8c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5e:	4b41      	ldr	r3, [pc, #260]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_RCC_OscConfig+0x186>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e1d3      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a76:	4b3b      	ldr	r3, [pc, #236]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4937      	ldr	r1, [pc, #220]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8a:	e03a      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d020      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a94:	4b34      	ldr	r3, [pc, #208]	@ (8004b68 <HAL_RCC_OscConfig+0x278>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fc fb27 	bl	80010ec <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fc fb23 	bl	80010ec <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1b4      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b28      	ldr	r3, [pc, #160]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4925      	ldr	r1, [pc, #148]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	e015      	b.n	8004b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad6:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <HAL_RCC_OscConfig+0x278>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fc fb06 	bl	80010ec <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fc fb02 	bl	80010ec <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e193      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d036      	beq.n	8004b7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b16:	4b15      	ldr	r3, [pc, #84]	@ (8004b6c <HAL_RCC_OscConfig+0x27c>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fc fae6 	bl	80010ec <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fc fae2 	bl	80010ec <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e173      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b36:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCC_OscConfig+0x274>)
 8004b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x234>
 8004b42:	e01b      	b.n	8004b7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_OscConfig+0x27c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fc facf 	bl	80010ec <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	e00e      	b.n	8004b70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fc facb 	bl	80010ec <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d907      	bls.n	8004b70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e15c      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
 8004b64:	40023800 	.word	0x40023800
 8004b68:	42470000 	.word	0x42470000
 8004b6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	4b8a      	ldr	r3, [pc, #552]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ea      	bne.n	8004b52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 8097 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8e:	4b83      	ldr	r3, [pc, #524]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004baa:	4b7c      	ldr	r3, [pc, #496]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b79      	ldr	r3, [pc, #484]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d118      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b76      	ldr	r3, [pc, #472]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a75      	ldr	r2, [pc, #468]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fc fa8b 	bl	80010ec <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fc fa87 	bl	80010ec <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e118      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b6c      	ldr	r3, [pc, #432]	@ (8004da0 <HAL_RCC_OscConfig+0x4b0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x31e>
 8004c00:	4b66      	ldr	r3, [pc, #408]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	4a65      	ldr	r2, [pc, #404]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0c:	e01c      	b.n	8004c48 <HAL_RCC_OscConfig+0x358>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x340>
 8004c16:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a60      	ldr	r2, [pc, #384]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c1c:	f043 0304 	orr.w	r3, r3, #4
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c22:	4b5e      	ldr	r3, [pc, #376]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c26:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c2e:	e00b      	b.n	8004c48 <HAL_RCC_OscConfig+0x358>
 8004c30:	4b5a      	ldr	r3, [pc, #360]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c34:	4a59      	ldr	r2, [pc, #356]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c3c:	4b57      	ldr	r3, [pc, #348]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	4a56      	ldr	r2, [pc, #344]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c42:	f023 0304 	bic.w	r3, r3, #4
 8004c46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c50:	f7fc fa4c 	bl	80010ec <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fc fa48 	bl	80010ec <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e0d7      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ee      	beq.n	8004c58 <HAL_RCC_OscConfig+0x368>
 8004c7a:	e014      	b.n	8004ca6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fc fa36 	bl	80010ec <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fc fa32 	bl	80010ec <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0c1      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c9a:	4b40      	ldr	r3, [pc, #256]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1ee      	bne.n	8004c84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80ad 	beq.w	8004e1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d060      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d145      	bne.n	8004d62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b33      	ldr	r3, [pc, #204]	@ (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fc fa06 	bl	80010ec <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7fc fa02 	bl	80010ec <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e093      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	4b29      	ldr	r3, [pc, #164]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	061b      	lsls	r3, r3, #24
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	491b      	ldr	r1, [pc, #108]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b1b      	ldr	r3, [pc, #108]	@ (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fc f9d7 	bl	80010ec <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d42:	f7fc f9d3 	bl	80010ec <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e064      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d54:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x452>
 8004d60:	e05c      	b.n	8004e1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <HAL_RCC_OscConfig+0x4b4>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc f9c0 	bl	80010ec <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fc f9bc 	bl	80010ec <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e04d      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	4b06      	ldr	r3, [pc, #24]	@ (8004d9c <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x480>
 8004d8e:	e045      	b.n	8004e1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e040      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004da8:	4b1f      	ldr	r3, [pc, #124]	@ (8004e28 <HAL_RCC_OscConfig+0x538>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d030      	beq.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d129      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d122      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d119      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	3b01      	subs	r3, #1
 8004df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d10f      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800

08004e2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e022      	b.n	8004e84 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fb fe85 	bl	8000b60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f814 	bl	8004e8c <HAL_SD_InitCard>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e00a      	b.n	8004e84 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b08e      	sub	sp, #56	@ 0x38
 8004e90:	af04      	add	r7, sp, #16
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004ea8:	2376      	movs	r3, #118	@ 0x76
 8004eaa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681d      	ldr	r5, [r3, #0]
 8004eb0:	466c      	mov	r4, sp
 8004eb2:	f107 0314 	add.w	r3, r7, #20
 8004eb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004eba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f001 fd79 	bl	80069bc <SDIO_Init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e04f      	b.n	8004f7c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004edc:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <HAL_SD_InitCard+0xf8>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fdb1 	bl	8006a4e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004eec:	4b25      	ldr	r3, [pc, #148]	@ (8004f84 <HAL_SD_InitCard+0xf8>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004ef2:	2002      	movs	r0, #2
 8004ef4:	f7fc f906 	bl	8001104 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fce5 	bl	80058c8 <SD_PowerON>
 8004efe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e02e      	b.n	8004f7c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fc04 	bl	800572c <SD_InitCard>
 8004f24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00b      	beq.n	8004f44 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e01b      	b.n	8004f7c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fde4 	bl	8006b1a <SDMMC_CmdBlockLength>
 8004f52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00f      	beq.n	8004f7a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f88 <HAL_SD_InitCard+0xfc>)
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	@ 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bdb0      	pop	{r4, r5, r7, pc}
 8004f84:	422580a0 	.word	0x422580a0
 8004f88:	004005ff 	.word	0x004005ff

08004f8c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_SD_IRQHandler+0x2e>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fd3e 	bl	8005a34 <SD_Read_IT>
 8004fb8:	e155      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 808f 	beq.w	80050e8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fd2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8004fe2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004fe6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d039      	beq.n	8005076 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_SD_IRQHandler+0x8a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f001 fda0 	bl	8006b60 <SDMMC_CmdStopTransfer>
 8005020:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f933 	bl	80052a0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005042:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_SD_IRQHandler+0xda>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f910 	bl	800528c <HAL_SD_RxCpltCallback>
 800506c:	e0fb      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f902 	bl	8005278 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005074:	e0f7      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80f2 	beq.w	8005266 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d011      	beq.n	80050b0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fd65 	bl	8006b60 <SDMMC_CmdStopTransfer>
 8005096:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8f8 	bl	80052a0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f040 80d5 	bne.w	8005266 <HAL_SD_IRQHandler+0x2da>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 80cf 	bne.w	8005266 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0208 	bic.w	r2, r2, #8
 80050d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f8c9 	bl	8005278 <HAL_SD_TxCpltCallback>
}
 80050e6:	e0be      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_SD_IRQHandler+0x17c>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fce8 	bl	8005ad6 <SD_Write_IT>
 8005106:	e0ae      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80a7 	beq.w	8005266 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	f043 0208 	orr.w	r2, r3, #8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	f043 0210 	orr.w	r2, r3, #16
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005188:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005198:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 fcde 	bl	8006b60 <SDMMC_CmdStopTransfer>
 80051a4:	4602      	mov	r2, r0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f869 	bl	80052a0 <HAL_SD_ErrorCallback>
}
 80051ce:	e04a      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d045      	beq.n	8005266 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0310 	and.w	r3, r3, #16
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <HAL_SD_IRQHandler+0x262>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d011      	beq.n	8005212 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <HAL_SD_IRQHandler+0x2e4>)
 80051f4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fc fe8e 	bl	8001f1c <HAL_DMA_Abort_IT>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02f      	beq.n	8005266 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fa20 	bl	8005650 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005210:	e029      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_SD_IRQHandler+0x29a>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	4a12      	ldr	r2, [pc, #72]	@ (8005274 <HAL_SD_IRQHandler+0x2e8>)
 800522c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	4618      	mov	r0, r3
 8005234:	f7fc fe72 	bl	8001f1c <HAL_DMA_Abort_IT>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d013      	beq.n	8005266 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fa3b 	bl	80056be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005248:	e00d      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f828 	bl	80052b4 <HAL_SD_AbortCallback>
}
 8005264:	e7ff      	b.n	8005266 <HAL_SD_IRQHandler+0x2da>
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	08005651 	.word	0x08005651
 8005274:	080056bf 	.word	0x080056bf

08005278 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052d6:	0f9b      	lsrs	r3, r3, #30
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e2:	0e9b      	lsrs	r3, r3, #26
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f4:	0e1b      	lsrs	r3, r3, #24
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	b2da      	uxtb	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b2da      	uxtb	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531e:	b2da      	uxtb	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005328:	0d1b      	lsrs	r3, r3, #20
 800532a:	b29a      	uxth	r2, r3
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	b2da      	uxtb	r2, r3
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005346:	0bdb      	lsrs	r3, r3, #15
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005358:	0b9b      	lsrs	r3, r3, #14
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	b2da      	uxtb	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800536a:	0b5b      	lsrs	r3, r3, #13
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800537c:	0b1b      	lsrs	r3, r3, #12
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005394:	2b00      	cmp	r3, #0
 8005396:	d163      	bne.n	8005460 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800539c:	009a      	lsls	r2, r3, #2
 800539e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053a2:	4013      	ands	r3, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80053a8:	0f92      	lsrs	r2, r2, #30
 80053aa:	431a      	orrs	r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053b4:	0edb      	lsrs	r3, r3, #27
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053c6:	0e1b      	lsrs	r3, r3, #24
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d8:	0d5b      	lsrs	r3, r3, #21
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ea:	0c9b      	lsrs	r3, r3, #18
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053fc:	0bdb      	lsrs	r3, r3, #15
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	b2da      	uxtb	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	7e1b      	ldrb	r3, [r3, #24]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	3302      	adds	r3, #2
 8005420:	2201      	movs	r2, #1
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800542a:	fb03 f202 	mul.w	r2, r3, r2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7a1b      	ldrb	r3, [r3, #8]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	2201      	movs	r2, #1
 800543e:	409a      	lsls	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800544c:	0a52      	lsrs	r2, r2, #9
 800544e:	fb03 f202 	mul.w	r2, r3, r2
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800545c:	661a      	str	r2, [r3, #96]	@ 0x60
 800545e:	e031      	b.n	80054c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005464:	2b01      	cmp	r3, #1
 8005466:	d11d      	bne.n	80054a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005476:	0c1b      	lsrs	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	3301      	adds	r3, #1
 8005484:	029a      	lsls	r2, r3, #10
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005498:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80054a2:	e00f      	b.n	80054c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a58      	ldr	r2, [pc, #352]	@ (800560c <HAL_SD_GetCardCSD+0x344>)
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e09d      	b.n	8005600 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054c8:	0b9b      	lsrs	r3, r3, #14
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	0fdb      	lsrs	r3, r3, #31
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	0f5b      	lsrs	r3, r3, #29
 800550a:	b2db      	uxtb	r3, r3
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	b2da      	uxtb	r2, r3
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	0e9b      	lsrs	r3, r3, #26
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	b2da      	uxtb	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	0d9b      	lsrs	r3, r3, #22
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	b2da      	uxtb	r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553e:	0d5b      	lsrs	r3, r3, #21
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556e:	0bdb      	lsrs	r3, r3, #15
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	0b9b      	lsrs	r3, r3, #14
 8005584:	b2db      	uxtb	r3, r3
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	b2da      	uxtb	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005596:	0b5b      	lsrs	r3, r3, #13
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	0b1b      	lsrs	r3, r3, #12
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	0a9b      	lsrs	r3, r3, #10
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	004005ff 	.word	0x004005ff

08005610 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9de 	bl	80059e4 <SD_SendStatus>
 8005628:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0a5b      	lsrs	r3, r3, #9
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005646:	693b      	ldr	r3, [r7, #16]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ffd1 	bl	8005610 <HAL_SD_GetCardState>
 800566e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d002      	beq.n	800568a <SD_DMATxAbort+0x3a>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b05      	cmp	r3, #5
 8005688:	d10a      	bne.n	80056a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fa66 	bl	8006b60 <SDMMC_CmdStopTransfer>
 8005694:	4602      	mov	r2, r0
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	431a      	orrs	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fe03 	bl	80052b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80056ae:	e002      	b.n	80056b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fdf5 	bl	80052a0 <HAL_SD_ErrorCallback>
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff ff9a 	bl	8005610 <HAL_SD_GetCardState>
 80056dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d002      	beq.n	80056f8 <SD_DMARxAbort+0x3a>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d10a      	bne.n	800570e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 fa2f 	bl	8006b60 <SDMMC_CmdStopTransfer>
 8005702:	4602      	mov	r2, r0
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff fdcc 	bl	80052b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800571c:	e002      	b.n	8005724 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff fdbe 	bl	80052a0 <HAL_SD_ErrorCallback>
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800572c:	b5b0      	push	{r4, r5, r7, lr}
 800572e:	b094      	sub	sp, #80	@ 0x50
 8005730:	af04      	add	r7, sp, #16
 8005732:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005734:	2301      	movs	r3, #1
 8005736:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f994 	bl	8006a6a <SDIO_GetPowerState>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005748:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800574c:	e0b8      	b.n	80058c0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	2b03      	cmp	r3, #3
 8005754:	d02f      	beq.n	80057b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f001 fac7 	bl	8006cee <SDMMC_CmdSendCID>
 8005760:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <SD_InitCard+0x40>
    {
      return errorstate;
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	e0a9      	b.n	80058c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f001 f9be 	bl	8006af4 <SDIO_GetResponse>
 8005778:	4602      	mov	r2, r0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2104      	movs	r1, #4
 8005784:	4618      	mov	r0, r3
 8005786:	f001 f9b5 	bl	8006af4 <SDIO_GetResponse>
 800578a:	4602      	mov	r2, r0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2108      	movs	r1, #8
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f9ac 	bl	8006af4 <SDIO_GetResponse>
 800579c:	4602      	mov	r2, r0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	210c      	movs	r1, #12
 80057a8:	4618      	mov	r0, r3
 80057aa:	f001 f9a3 	bl	8006af4 <SDIO_GetResponse>
 80057ae:	4602      	mov	r2, r0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d00d      	beq.n	80057da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f107 020e 	add.w	r2, r7, #14
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 facd 	bl	8006d68 <SDMMC_CmdSetRelAdd>
 80057ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <SD_InitCard+0xae>
    {
      return errorstate;
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	e072      	b.n	80058c0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d036      	beq.n	8005850 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f001 fa97 	bl	8006d2a <SDMMC_CmdSendCSD>
 80057fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005806:	e05b      	b.n	80058c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f970 	bl	8006af4 <SDIO_GetResponse>
 8005814:	4602      	mov	r2, r0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2104      	movs	r1, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f967 	bl	8006af4 <SDIO_GetResponse>
 8005826:	4602      	mov	r2, r0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2108      	movs	r1, #8
 8005832:	4618      	mov	r0, r3
 8005834:	f001 f95e 	bl	8006af4 <SDIO_GetResponse>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	210c      	movs	r1, #12
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f955 	bl	8006af4 <SDIO_GetResponse>
 800584a:	4602      	mov	r2, r0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2104      	movs	r1, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f001 f94c 	bl	8006af4 <SDIO_GetResponse>
 800585c:	4603      	mov	r3, r0
 800585e:	0d1a      	lsrs	r2, r3, #20
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005864:	f107 0310 	add.w	r3, r7, #16
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fd2c 	bl	80052c8 <HAL_SD_GetCardCSD>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005876:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800587a:	e021      	b.n	80058c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6819      	ldr	r1, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	2200      	movs	r2, #0
 8005888:	461c      	mov	r4, r3
 800588a:	4615      	mov	r5, r2
 800588c:	4622      	mov	r2, r4
 800588e:	462b      	mov	r3, r5
 8005890:	4608      	mov	r0, r1
 8005892:	f001 f987 	bl	8006ba4 <SDMMC_CmdSelDesel>
 8005896:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <SD_InitCard+0x176>
  {
    return errorstate;
 800589e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a0:	e00e      	b.n	80058c0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681d      	ldr	r5, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	466c      	mov	r4, sp
 80058aa:	f103 0210 	add.w	r2, r3, #16
 80058ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80058b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058b4:	3304      	adds	r3, #4
 80058b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058b8:	4628      	mov	r0, r5
 80058ba:	f001 f87f 	bl	80069bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3740      	adds	r7, #64	@ 0x40
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bdb0      	pop	{r4, r5, r7, pc}

080058c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f001 f982 	bl	8006bea <SDMMC_CmdGoIdleState>
 80058e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	e072      	b.n	80059d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 f995 	bl	8006c26 <SDMMC_CmdOperCond>
 80058fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f001 f96b 	bl	8006bea <SDMMC_CmdGoIdleState>
 8005914:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <SD_PowerON+0x5e>
    {
      return errorstate;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	e05b      	b.n	80059d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800592a:	2b01      	cmp	r3, #1
 800592c:	d137      	bne.n	800599e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f995 	bl	8006c64 <SDMMC_CmdAppCommand>
 800593a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02d      	beq.n	800599e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005942:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005946:	e047      	b.n	80059d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f001 f988 	bl	8006c64 <SDMMC_CmdAppCommand>
 8005954:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <SD_PowerON+0x98>
    {
      return errorstate;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e03b      	b.n	80059d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	491e      	ldr	r1, [pc, #120]	@ (80059e0 <SD_PowerON+0x118>)
 8005966:	4618      	mov	r0, r3
 8005968:	f001 f99e 	bl	8006ca8 <SDMMC_CmdAppOperCommand>
 800596c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005974:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005978:	e02e      	b.n	80059d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f001 f8b7 	bl	8006af4 <SDIO_GetResponse>
 8005986:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	0fdb      	lsrs	r3, r3, #31
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <SD_PowerON+0xcc>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <SD_PowerON+0xce>
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]

    count++;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	3301      	adds	r3, #1
 800599c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d802      	bhi.n	80059ae <SD_PowerON+0xe6>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0cc      	beq.n	8005948 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d902      	bls.n	80059be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059bc:	e00c      	b.n	80059d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80059ce:	e002      	b.n	80059d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	c1100000 	.word	0xc1100000

080059e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80059f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059f8:	e018      	b.n	8005a2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a02:	041b      	lsls	r3, r3, #16
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f001 f9cf 	bl	8006daa <SDMMC_CmdSendStatus>
 8005a0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	e009      	b.n	8005a2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 f868 	bl	8006af4 <SDIO_GetResponse>
 8005a24:	4602      	mov	r2, r0
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d03f      	beq.n	8005ace <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e033      	b.n	8005abc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 ffda 	bl	8006a12 <SDIO_ReadFIFO>
 8005a5e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	0c1b      	lsrs	r3, r3, #16
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	0e1b      	lsrs	r3, r3, #24
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b07      	cmp	r3, #7
 8005ac0:	d9c8      	bls.n	8005a54 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d043      	beq.n	8005b78 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e037      	b.n	8005b66 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	021a      	lsls	r2, r3, #8
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	041a      	lsls	r2, r3, #16
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	061a      	lsls	r2, r3, #24
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f107 0208 	add.w	r2, r7, #8
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 ff66 	bl	8006a2c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3301      	adds	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b07      	cmp	r3, #7
 8005b6a:	d9c4      	bls.n	8005af6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e042      	b.n	8005c18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fb f8b2 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2224      	movs	r2, #36	@ 0x24
 8005bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fc85 	bl	80064d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b0ba      	sub	sp, #232	@ 0xe8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10f      	bne.n	8005c86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_UART_IRQHandler+0x66>
 8005c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fb69 	bl	8006356 <UART_Receive_IT>
      return;
 8005c84:	e25b      	b.n	800613e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80de 	beq.w	8005e4c <HAL_UART_IRQHandler+0x22c>
 8005c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80d1 	beq.w	8005e4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <HAL_UART_IRQHandler+0xae>
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xd2>
 8005cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cea:	f043 0202 	orr.w	r2, r3, #2
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <HAL_UART_IRQHandler+0xf6>
 8005cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0e:	f043 0204 	orr.w	r2, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d011      	beq.n	8005d46 <HAL_UART_IRQHandler+0x126>
 8005d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3e:	f043 0208 	orr.w	r2, r3, #8
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 81f2 	beq.w	8006134 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_UART_IRQHandler+0x14e>
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 faf4 	bl	8006356 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d78:	2b40      	cmp	r3, #64	@ 0x40
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <HAL_UART_IRQHandler+0x17a>
 8005d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04f      	beq.n	8005e3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9fc 	bl	8006198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005daa:	2b40      	cmp	r3, #64	@ 0x40
 8005dac:	d141      	bne.n	8005e32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3314      	adds	r3, #20
 8005dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1d9      	bne.n	8005dae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d013      	beq.n	8005e2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e06:	4a7e      	ldr	r2, [pc, #504]	@ (8006000 <HAL_UART_IRQHandler+0x3e0>)
 8005e08:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc f884 	bl	8001f1c <HAL_DMA_Abort_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d016      	beq.n	8005e48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	e00e      	b.n	8005e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f99e 	bl	800616c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	e00a      	b.n	8005e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f99a 	bl	800616c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e006      	b.n	8005e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f996 	bl	800616c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e46:	e175      	b.n	8006134 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e48:	bf00      	nop
    return;
 8005e4a:	e173      	b.n	8006134 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	f040 814f 	bne.w	80060f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8148 	beq.w	80060f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 8141 	beq.w	80060f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e92:	2b40      	cmp	r3, #64	@ 0x40
 8005e94:	f040 80b6 	bne.w	8006004 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8145 	beq.w	8006138 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	f080 813e 	bcs.w	8006138 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ec2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ece:	f000 8088 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005efe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1d9      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3314      	adds	r3, #20
 8005f24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e1      	bne.n	8005f1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e3      	bne.n	8005f5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005fc4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005fc6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e3      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fb ff2d 	bl	8001e3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8c1 	bl	8006180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ffe:	e09b      	b.n	8006138 <HAL_UART_IRQHandler+0x518>
 8006000:	0800625f 	.word	0x0800625f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800600c:	b29b      	uxth	r3, r3
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 808e 	beq.w	800613c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8089 	beq.w	800613c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800603a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800604e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006050:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800605c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e3      	bne.n	800602a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3314      	adds	r3, #20
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	623b      	str	r3, [r7, #32]
   return(result);
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3314      	adds	r3, #20
 8006082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006086:	633a      	str	r2, [r7, #48]	@ 0x30
 8006088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e3      	bne.n	8006062 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0310 	bic.w	r3, r3, #16
 80060be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80060cc:	61fa      	str	r2, [r7, #28]
 80060ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e3      	bne.n	80060a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f847 	bl	8006180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060f2:	e023      	b.n	800613c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <HAL_UART_IRQHandler+0x4f4>
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f8ba 	bl	8006286 <UART_Transmit_IT>
    return;
 8006112:	e014      	b.n	800613e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00e      	beq.n	800613e <HAL_UART_IRQHandler+0x51e>
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8fa 	bl	8006326 <UART_EndTransmit_IT>
    return;
 8006132:	e004      	b.n	800613e <HAL_UART_IRQHandler+0x51e>
    return;
 8006134:	bf00      	nop
 8006136:	e002      	b.n	800613e <HAL_UART_IRQHandler+0x51e>
      return;
 8006138:	bf00      	nop
 800613a:	e000      	b.n	800613e <HAL_UART_IRQHandler+0x51e>
      return;
 800613c:	bf00      	nop
  }
}
 800613e:	37e8      	adds	r7, #232	@ 0xe8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b095      	sub	sp, #84	@ 0x54
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e5      	bne.n	80061a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e5      	bne.n	80061d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800620c:	2b01      	cmp	r3, #1
 800620e:	d119      	bne.n	8006244 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f023 0310 	bic.w	r3, r3, #16
 8006226:	647b      	str	r3, [r7, #68]	@ 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006230:	61ba      	str	r2, [r7, #24]
 8006232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e5      	bne.n	8006210 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006252:	bf00      	nop
 8006254:	3754      	adds	r7, #84	@ 0x54
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ff77 	bl	800616c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b21      	cmp	r3, #33	@ 0x21
 8006298:	d13e      	bne.n	8006318 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a2:	d114      	bne.n	80062ce <UART_Transmit_IT+0x48>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d110      	bne.n	80062ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	1c9a      	adds	r2, r3, #2
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]
 80062cc:	e008      	b.n	80062e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	1c59      	adds	r1, r3, #1
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6211      	str	r1, [r2, #32]
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4619      	mov	r1, r3
 80062ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10f      	bne.n	8006314 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006302:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006312:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	e000      	b.n	800631a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
  }
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800633c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fefc 	bl	8006144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b08c      	sub	sp, #48	@ 0x30
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b22      	cmp	r3, #34	@ 0x22
 8006368:	f040 80ae 	bne.w	80064c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006374:	d117      	bne.n	80063a6 <UART_Receive_IT+0x50>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d113      	bne.n	80063a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006394:	b29a      	uxth	r2, r3
 8006396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006398:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80063a4:	e026      	b.n	80063f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b8:	d007      	beq.n	80063ca <UART_Receive_IT+0x74>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <UART_Receive_IT+0x82>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e008      	b.n	80063ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4619      	mov	r1, r3
 8006402:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006404:	2b00      	cmp	r3, #0
 8006406:	d15d      	bne.n	80064c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0220 	bic.w	r2, r2, #32
 8006416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	2b01      	cmp	r3, #1
 800644c:	d135      	bne.n	80064ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 0310 	bic.w	r3, r3, #16
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006474:	623a      	str	r2, [r7, #32]
 8006476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	69f9      	ldr	r1, [r7, #28]
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	61bb      	str	r3, [r7, #24]
   return(result);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b10      	cmp	r3, #16
 8006494:	d10a      	bne.n	80064ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fe64 	bl	8006180 <HAL_UARTEx_RxEventCallback>
 80064b8:	e002      	b.n	80064c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fe4c 	bl	8006158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e002      	b.n	80064ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3730      	adds	r7, #48	@ 0x30
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b0c0      	sub	sp, #256	@ 0x100
 80064da:	af00      	add	r7, sp, #0
 80064dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f0:	68d9      	ldr	r1, [r3, #12]
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	ea40 0301 	orr.w	r3, r0, r1
 80064fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	431a      	orrs	r2, r3
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800652c:	f021 010c 	bic.w	r1, r1, #12
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800653a:	430b      	orrs	r3, r1
 800653c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654e:	6999      	ldr	r1, [r3, #24]
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	ea40 0301 	orr.w	r3, r0, r1
 800655a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b8f      	ldr	r3, [pc, #572]	@ (80067a0 <UART_SetConfig+0x2cc>)
 8006564:	429a      	cmp	r2, r3
 8006566:	d005      	beq.n	8006574 <UART_SetConfig+0xa0>
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b8d      	ldr	r3, [pc, #564]	@ (80067a4 <UART_SetConfig+0x2d0>)
 8006570:	429a      	cmp	r2, r3
 8006572:	d104      	bne.n	800657e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006574:	f7fd fcd4 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 8006578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800657c:	e003      	b.n	8006586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fd fcbb 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8006582:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006590:	f040 810c 	bne.w	80067ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006598:	2200      	movs	r2, #0
 800659a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800659e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	1891      	adds	r1, r2, r2
 80065ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065ae:	415b      	adcs	r3, r3
 80065b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065b6:	4621      	mov	r1, r4
 80065b8:	eb12 0801 	adds.w	r8, r2, r1
 80065bc:	4629      	mov	r1, r5
 80065be:	eb43 0901 	adc.w	r9, r3, r1
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065d6:	4690      	mov	r8, r2
 80065d8:	4699      	mov	r9, r3
 80065da:	4623      	mov	r3, r4
 80065dc:	eb18 0303 	adds.w	r3, r8, r3
 80065e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065e4:	462b      	mov	r3, r5
 80065e6:	eb49 0303 	adc.w	r3, r9, r3
 80065ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006602:	460b      	mov	r3, r1
 8006604:	18db      	adds	r3, r3, r3
 8006606:	653b      	str	r3, [r7, #80]	@ 0x50
 8006608:	4613      	mov	r3, r2
 800660a:	eb42 0303 	adc.w	r3, r2, r3
 800660e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006618:	f7f9 fdf4 	bl	8000204 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b61      	ldr	r3, [pc, #388]	@ (80067a8 <UART_SetConfig+0x2d4>)
 8006622:	fba3 2302 	umull	r2, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	011c      	lsls	r4, r3, #4
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006634:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	1891      	adds	r1, r2, r2
 8006642:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006644:	415b      	adcs	r3, r3
 8006646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800664c:	4641      	mov	r1, r8
 800664e:	eb12 0a01 	adds.w	sl, r2, r1
 8006652:	4649      	mov	r1, r9
 8006654:	eb43 0b01 	adc.w	fp, r3, r1
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800666c:	4692      	mov	sl, r2
 800666e:	469b      	mov	fp, r3
 8006670:	4643      	mov	r3, r8
 8006672:	eb1a 0303 	adds.w	r3, sl, r3
 8006676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800667a:	464b      	mov	r3, r9
 800667c:	eb4b 0303 	adc.w	r3, fp, r3
 8006680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006690:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006698:	460b      	mov	r3, r1
 800669a:	18db      	adds	r3, r3, r3
 800669c:	643b      	str	r3, [r7, #64]	@ 0x40
 800669e:	4613      	mov	r3, r2
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066ae:	f7f9 fda9 	bl	8000204 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	4b3b      	ldr	r3, [pc, #236]	@ (80067a8 <UART_SetConfig+0x2d4>)
 80066ba:	fba3 2301 	umull	r2, r3, r3, r1
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2264      	movs	r2, #100	@ 0x64
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	1acb      	subs	r3, r1, r3
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066ce:	4b36      	ldr	r3, [pc, #216]	@ (80067a8 <UART_SetConfig+0x2d4>)
 80066d0:	fba3 2302 	umull	r2, r3, r3, r2
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066dc:	441c      	add	r4, r3
 80066de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	1891      	adds	r1, r2, r2
 80066f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066f8:	415b      	adcs	r3, r3
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006700:	4641      	mov	r1, r8
 8006702:	1851      	adds	r1, r2, r1
 8006704:	6339      	str	r1, [r7, #48]	@ 0x30
 8006706:	4649      	mov	r1, r9
 8006708:	414b      	adcs	r3, r1
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006718:	4659      	mov	r1, fp
 800671a:	00cb      	lsls	r3, r1, #3
 800671c:	4651      	mov	r1, sl
 800671e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006722:	4651      	mov	r1, sl
 8006724:	00ca      	lsls	r2, r1, #3
 8006726:	4610      	mov	r0, r2
 8006728:	4619      	mov	r1, r3
 800672a:	4603      	mov	r3, r0
 800672c:	4642      	mov	r2, r8
 800672e:	189b      	adds	r3, r3, r2
 8006730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006734:	464b      	mov	r3, r9
 8006736:	460a      	mov	r2, r1
 8006738:	eb42 0303 	adc.w	r3, r2, r3
 800673c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800674c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006754:	460b      	mov	r3, r1
 8006756:	18db      	adds	r3, r3, r3
 8006758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800675a:	4613      	mov	r3, r2
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800676a:	f7f9 fd4b 	bl	8000204 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4b0d      	ldr	r3, [pc, #52]	@ (80067a8 <UART_SetConfig+0x2d4>)
 8006774:	fba3 1302 	umull	r1, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	2164      	movs	r1, #100	@ 0x64
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	3332      	adds	r3, #50	@ 0x32
 8006786:	4a08      	ldr	r2, [pc, #32]	@ (80067a8 <UART_SetConfig+0x2d4>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	f003 0207 	and.w	r2, r3, #7
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4422      	add	r2, r4
 800679a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800679c:	e106      	b.n	80069ac <UART_SetConfig+0x4d8>
 800679e:	bf00      	nop
 80067a0:	40011000 	.word	0x40011000
 80067a4:	40011400 	.word	0x40011400
 80067a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	1891      	adds	r1, r2, r2
 80067c4:	6239      	str	r1, [r7, #32]
 80067c6:	415b      	adcs	r3, r3
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ce:	4641      	mov	r1, r8
 80067d0:	1854      	adds	r4, r2, r1
 80067d2:	4649      	mov	r1, r9
 80067d4:	eb43 0501 	adc.w	r5, r3, r1
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	00eb      	lsls	r3, r5, #3
 80067e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e6:	00e2      	lsls	r2, r4, #3
 80067e8:	4614      	mov	r4, r2
 80067ea:	461d      	mov	r5, r3
 80067ec:	4643      	mov	r3, r8
 80067ee:	18e3      	adds	r3, r4, r3
 80067f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f4:	464b      	mov	r3, r9
 80067f6:	eb45 0303 	adc.w	r3, r5, r3
 80067fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800680a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800681a:	4629      	mov	r1, r5
 800681c:	008b      	lsls	r3, r1, #2
 800681e:	4621      	mov	r1, r4
 8006820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006824:	4621      	mov	r1, r4
 8006826:	008a      	lsls	r2, r1, #2
 8006828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800682c:	f7f9 fcea 	bl	8000204 <__aeabi_uldivmod>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4b60      	ldr	r3, [pc, #384]	@ (80069b8 <UART_SetConfig+0x4e4>)
 8006836:	fba3 2302 	umull	r2, r3, r3, r2
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	011c      	lsls	r4, r3, #4
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800684c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	61b9      	str	r1, [r7, #24]
 8006858:	415b      	adcs	r3, r3
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006860:	4641      	mov	r1, r8
 8006862:	1851      	adds	r1, r2, r1
 8006864:	6139      	str	r1, [r7, #16]
 8006866:	4649      	mov	r1, r9
 8006868:	414b      	adcs	r3, r1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006878:	4659      	mov	r1, fp
 800687a:	00cb      	lsls	r3, r1, #3
 800687c:	4651      	mov	r1, sl
 800687e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006882:	4651      	mov	r1, sl
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	4603      	mov	r3, r0
 800688c:	4642      	mov	r2, r8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006894:	464b      	mov	r3, r9
 8006896:	460a      	mov	r2, r1
 8006898:	eb42 0303 	adc.w	r3, r2, r3
 800689c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068b8:	4649      	mov	r1, r9
 80068ba:	008b      	lsls	r3, r1, #2
 80068bc:	4641      	mov	r1, r8
 80068be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c2:	4641      	mov	r1, r8
 80068c4:	008a      	lsls	r2, r1, #2
 80068c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068ca:	f7f9 fc9b 	bl	8000204 <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	4b38      	ldr	r3, [pc, #224]	@ (80069b8 <UART_SetConfig+0x4e4>)
 80068d6:	fba3 2301 	umull	r2, r3, r3, r1
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2264      	movs	r2, #100	@ 0x64
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	1acb      	subs	r3, r1, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	@ 0x32
 80068e8:	4a33      	ldr	r2, [pc, #204]	@ (80069b8 <UART_SetConfig+0x4e4>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068f4:	441c      	add	r4, r3
 80068f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fa:	2200      	movs	r2, #0
 80068fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80068fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8006900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	1891      	adds	r1, r2, r2
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	415b      	adcs	r3, r3
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006914:	4641      	mov	r1, r8
 8006916:	1851      	adds	r1, r2, r1
 8006918:	6039      	str	r1, [r7, #0]
 800691a:	4649      	mov	r1, r9
 800691c:	414b      	adcs	r3, r1
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800692c:	4659      	mov	r1, fp
 800692e:	00cb      	lsls	r3, r1, #3
 8006930:	4651      	mov	r1, sl
 8006932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006936:	4651      	mov	r1, sl
 8006938:	00ca      	lsls	r2, r1, #3
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	4603      	mov	r3, r0
 8006940:	4642      	mov	r2, r8
 8006942:	189b      	adds	r3, r3, r2
 8006944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006946:	464b      	mov	r3, r9
 8006948:	460a      	mov	r2, r1
 800694a:	eb42 0303 	adc.w	r3, r2, r3
 800694e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	663b      	str	r3, [r7, #96]	@ 0x60
 800695a:	667a      	str	r2, [r7, #100]	@ 0x64
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006968:	4649      	mov	r1, r9
 800696a:	008b      	lsls	r3, r1, #2
 800696c:	4641      	mov	r1, r8
 800696e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006972:	4641      	mov	r1, r8
 8006974:	008a      	lsls	r2, r1, #2
 8006976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800697a:	f7f9 fc43 	bl	8000204 <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4b0d      	ldr	r3, [pc, #52]	@ (80069b8 <UART_SetConfig+0x4e4>)
 8006984:	fba3 1302 	umull	r1, r3, r3, r2
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	2164      	movs	r1, #100	@ 0x64
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	3332      	adds	r3, #50	@ 0x32
 8006996:	4a08      	ldr	r2, [pc, #32]	@ (80069b8 <UART_SetConfig+0x4e4>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	f003 020f 	and.w	r2, r3, #15
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4422      	add	r2, r4
 80069aa:	609a      	str	r2, [r3, #8]
}
 80069ac:	bf00      	nop
 80069ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069b2:	46bd      	mov	sp, r7
 80069b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b8:	51eb851f 	.word	0x51eb851f

080069bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80069bc:	b084      	sub	sp, #16
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	f107 001c 	add.w	r0, r7, #28
 80069ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80069d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80069d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80069d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80069da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80069de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80069e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80069e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80069e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80069f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	b004      	add	sp, #16
 8006a10:	4770      	bx	lr

08006a12 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0303 	and.w	r3, r3, #3
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006aa4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006aaa:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006ab0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006ac0:	f023 030f 	bic.w	r3, r3, #15
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	b2db      	uxtb	r3, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3314      	adds	r3, #20
 8006b02:	461a      	mov	r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4413      	add	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
}  
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b088      	sub	sp, #32
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006b28:	2310      	movs	r3, #16
 8006b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b2c:	2340      	movs	r3, #64	@ 0x40
 8006b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ffa0 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4a:	2110      	movs	r1, #16
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f94f 	bl	8006df0 <SDMMC_GetCmdResp1>
 8006b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b54:	69fb      	ldr	r3, [r7, #28]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b70:	2340      	movs	r3, #64	@ 0x40
 8006b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b7e:	f107 0308 	add.w	r3, r7, #8
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ff7e 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006b8a:	4a05      	ldr	r2, [pc, #20]	@ (8006ba0 <SDMMC_CmdStopTransfer+0x40>)
 8006b8c:	210c      	movs	r1, #12
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f92e 	bl	8006df0 <SDMMC_GetCmdResp1>
 8006b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b96:	69fb      	ldr	r3, [r7, #28]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	05f5e100 	.word	0x05f5e100

08006ba4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	@ 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006bb4:	2307      	movs	r3, #7
 8006bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bb8:	2340      	movs	r3, #64	@ 0x40
 8006bba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bc4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bc6:	f107 0310 	add.w	r3, r7, #16
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ff5a 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bd6:	2107      	movs	r1, #7
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f909 	bl	8006df0 <SDMMC_GetCmdResp1>
 8006bde:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3728      	adds	r7, #40	@ 0x28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c08:	f107 0308 	add.w	r3, r7, #8
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff ff39 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fb23 	bl	8007260 <SDMMC_GetCmdError>
 8006c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b088      	sub	sp, #32
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c2e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c34:	2308      	movs	r3, #8
 8006c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c38:	2340      	movs	r3, #64	@ 0x40
 8006c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff ff1a 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fab6 	bl	80071c4 <SDMMC_GetCmdResp7>
 8006c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c72:	2337      	movs	r3, #55	@ 0x37
 8006c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c76:	2340      	movs	r3, #64	@ 0x40
 8006c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fefb 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c94:	2137      	movs	r1, #55	@ 0x37
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8aa 	bl	8006df0 <SDMMC_GetCmdResp1>
 8006c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c9e:	69fb      	ldr	r3, [r7, #28]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006cb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006cbe:	2329      	movs	r3, #41	@ 0x29
 8006cc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cc2:	2340      	movs	r3, #64	@ 0x40
 8006cc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cd0:	f107 0308 	add.w	r3, r7, #8
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fed5 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f9bd 	bl	800705c <SDMMC_GetCmdResp3>
 8006ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006cfe:	23c0      	movs	r3, #192	@ 0xc0
 8006d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff feb7 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f957 	bl	8006fcc <SDMMC_GetCmdResp2>
 8006d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d20:	69fb      	ldr	r3, [r7, #28]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d38:	2309      	movs	r3, #9
 8006d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d3c:	23c0      	movs	r3, #192	@ 0xc0
 8006d3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d4a:	f107 0308 	add.w	r3, r7, #8
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff fe98 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f938 	bl	8006fcc <SDMMC_GetCmdResp2>
 8006d5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d5e:	69fb      	ldr	r3, [r7, #28]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006d76:	2303      	movs	r3, #3
 8006d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d7a:	2340      	movs	r3, #64	@ 0x40
 8006d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d88:	f107 0308 	add.w	r3, r7, #8
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fe79 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	2103      	movs	r1, #3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f99d 	bl	80070d8 <SDMMC_GetCmdResp6>
 8006d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006da0:	69fb      	ldr	r3, [r7, #28]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b088      	sub	sp, #32
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006db8:	230d      	movs	r3, #13
 8006dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dbc:	2340      	movs	r3, #64	@ 0x40
 8006dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dca:	f107 0308 	add.w	r3, r7, #8
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff fe58 	bl	8006a86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dda:	210d      	movs	r1, #13
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f807 	bl	8006df0 <SDMMC_GetCmdResp1>
 8006de2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de4:	69fb      	ldr	r3, [r7, #28]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dfe:	4b70      	ldr	r3, [pc, #448]	@ (8006fc0 <SDMMC_GetCmdResp1+0x1d0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a70      	ldr	r2, [pc, #448]	@ (8006fc4 <SDMMC_GetCmdResp1+0x1d4>)
 8006e04:	fba2 2303 	umull	r2, r3, r2, r3
 8006e08:	0a5a      	lsrs	r2, r3, #9
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	fb02 f303 	mul.w	r3, r2, r3
 8006e10:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	61fa      	str	r2, [r7, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e20:	e0c9      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e26:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0ef      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ea      	bne.n	8006e12 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e4e:	2304      	movs	r3, #4
 8006e50:	e0b1      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0a6      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	22c5      	movs	r2, #197	@ 0xc5
 8006e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff fe33 	bl	8006ada <SDIO_GetCommandResponse>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d001      	beq.n	8006e82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e099      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e82:	2100      	movs	r1, #0
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff fe35 	bl	8006af4 <SDIO_GetResponse>
 8006e8a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8006fc8 <SDMMC_GetCmdResp1+0x1d8>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e08d      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da02      	bge.n	8006ea6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006ea0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ea4:	e087      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006eb0:	2340      	movs	r3, #64	@ 0x40
 8006eb2:	e080      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006ebe:	2380      	movs	r3, #128	@ 0x80
 8006ec0:	e079      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ed0:	e071      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006edc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ee0:	e069      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ef0:	e061      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006efc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006f00:	e059      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f10:	e051      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f20:	e049      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006f30:	e041      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006f3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f40:	e039      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006f50:	e031      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006f5c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006f60:	e029      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006f6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006f70:	e021      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006f7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006f80:	e019      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006f8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006f90:	e011      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006fa0:	e009      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006fac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006fb0:	e001      	b.n	8006fb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000000 	.word	0x20000000
 8006fc4:	10624dd3 	.word	0x10624dd3
 8006fc8:	fdffe008 	.word	0xfdffe008

08006fcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8007054 <SDMMC_GetCmdResp2+0x88>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007058 <SDMMC_GetCmdResp2+0x8c>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	0a5b      	lsrs	r3, r3, #9
 8006fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	60fa      	str	r2, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ff4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ff8:	e026      	b.n	8007048 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ffe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ef      	beq.n	8006fea <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1ea      	bne.n	8006fea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2204      	movs	r2, #4
 8007024:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007026:	2304      	movs	r3, #4
 8007028:	e00e      	b.n	8007048 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800703c:	2301      	movs	r3, #1
 800703e:	e003      	b.n	8007048 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	22c5      	movs	r2, #197	@ 0xc5
 8007044:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20000000 	.word	0x20000000
 8007058:	10624dd3 	.word	0x10624dd3

0800705c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007064:	4b1a      	ldr	r3, [pc, #104]	@ (80070d0 <SDMMC_GetCmdResp3+0x74>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1a      	ldr	r2, [pc, #104]	@ (80070d4 <SDMMC_GetCmdResp3+0x78>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	0a5b      	lsrs	r3, r3, #9
 8007070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007074:	fb02 f303 	mul.w	r3, r2, r3
 8007078:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	1e5a      	subs	r2, r3, #1
 800707e:	60fa      	str	r2, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007084:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007088:	e01b      	b.n	80070c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0ef      	beq.n	800707a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1ea      	bne.n	800707a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2204      	movs	r2, #4
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070b6:	2304      	movs	r3, #4
 80070b8:	e003      	b.n	80070c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	22c5      	movs	r2, #197	@ 0xc5
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000000 	.word	0x20000000
 80070d4:	10624dd3 	.word	0x10624dd3

080070d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	460b      	mov	r3, r1
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070e6:	4b35      	ldr	r3, [pc, #212]	@ (80071bc <SDMMC_GetCmdResp6+0xe4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a35      	ldr	r2, [pc, #212]	@ (80071c0 <SDMMC_GetCmdResp6+0xe8>)
 80070ec:	fba2 2303 	umull	r2, r3, r2, r3
 80070f0:	0a5b      	lsrs	r3, r3, #9
 80070f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	1e5a      	subs	r2, r3, #1
 8007100:	61fa      	str	r2, [r7, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007106:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800710a:	e052      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007110:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0ef      	beq.n	80070fc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1ea      	bne.n	80070fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2204      	movs	r2, #4
 8007136:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007138:	2304      	movs	r3, #4
 800713a:	e03a      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800714e:	2301      	movs	r3, #1
 8007150:	e02f      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff fcc1 	bl	8006ada <SDIO_GetCommandResponse>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	4293      	cmp	r3, r2
 8007160:	d001      	beq.n	8007166 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007162:	2301      	movs	r3, #1
 8007164:	e025      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	22c5      	movs	r2, #197	@ 0xc5
 800716a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800716c:	2100      	movs	r1, #0
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff fcc0 	bl	8006af4 <SDIO_GetResponse>
 8007174:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800718a:	2300      	movs	r3, #0
 800718c:	e011      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800719c:	e009      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80071a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071ac:	e001      	b.n	80071b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000000 	.word	0x20000000
 80071c0:	10624dd3 	.word	0x10624dd3

080071c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071cc:	4b22      	ldr	r3, [pc, #136]	@ (8007258 <SDMMC_GetCmdResp7+0x94>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a22      	ldr	r2, [pc, #136]	@ (800725c <SDMMC_GetCmdResp7+0x98>)
 80071d2:	fba2 2303 	umull	r2, r3, r2, r3
 80071d6:	0a5b      	lsrs	r3, r3, #9
 80071d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1e5a      	subs	r2, r3, #1
 80071e6:	60fa      	str	r2, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80071f0:	e02c      	b.n	800724c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0ef      	beq.n	80071e2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1ea      	bne.n	80071e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007210:	f003 0304 	and.w	r3, r3, #4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d004      	beq.n	8007222 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2204      	movs	r2, #4
 800721c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800721e:	2304      	movs	r3, #4
 8007220:	e014      	b.n	800724c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007234:	2301      	movs	r3, #1
 8007236:	e009      	b.n	800724c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2240      	movs	r2, #64	@ 0x40
 8007248:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
  
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	20000000 	.word	0x20000000
 800725c:	10624dd3 	.word	0x10624dd3

08007260 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007268:	4b11      	ldr	r3, [pc, #68]	@ (80072b0 <SDMMC_GetCmdError+0x50>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <SDMMC_GetCmdError+0x54>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	0a5b      	lsrs	r3, r3, #9
 8007274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1e5a      	subs	r2, r3, #1
 8007282:	60fa      	str	r2, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800728c:	e009      	b.n	80072a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f1      	beq.n	800727e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	22c5      	movs	r2, #197	@ 0xc5
 800729e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000000 	.word	0x20000000
 80072b4:	10624dd3 	.word	0x10624dd3

080072b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072b8:	b084      	sub	sp, #16
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	f107 001c 	add.w	r0, r7, #28
 80072c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d123      	bne.n	800731a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80072e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80072fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d105      	bne.n	800730e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fae2 	bl	80088d8 <USB_CoreReset>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]
 8007318:	e01b      	b.n	8007352 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fad6 	bl	80088d8 <USB_CoreReset>
 800732c:	4603      	mov	r3, r0
 800732e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007330:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007334:	2b00      	cmp	r3, #0
 8007336:	d106      	bne.n	8007346 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	639a      	str	r2, [r3, #56]	@ 0x38
 8007344:	e005      	b.n	8007352 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007352:	7fbb      	ldrb	r3, [r7, #30]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d10b      	bne.n	8007370 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f043 0206 	orr.w	r2, r3, #6
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f043 0220 	orr.w	r2, r3, #32
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800737c:	b004      	add	sp, #16
 800737e:	4770      	bx	lr

08007380 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d165      	bne.n	8007460 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4a41      	ldr	r2, [pc, #260]	@ (800749c <USB_SetTurnaroundTime+0x11c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d906      	bls.n	80073aa <USB_SetTurnaroundTime+0x2a>
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4a40      	ldr	r2, [pc, #256]	@ (80074a0 <USB_SetTurnaroundTime+0x120>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d202      	bcs.n	80073aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80073a4:	230f      	movs	r3, #15
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e062      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	4a3c      	ldr	r2, [pc, #240]	@ (80074a0 <USB_SetTurnaroundTime+0x120>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d306      	bcc.n	80073c0 <USB_SetTurnaroundTime+0x40>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4a3b      	ldr	r2, [pc, #236]	@ (80074a4 <USB_SetTurnaroundTime+0x124>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d202      	bcs.n	80073c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80073ba:	230e      	movs	r3, #14
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e057      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4a38      	ldr	r2, [pc, #224]	@ (80074a4 <USB_SetTurnaroundTime+0x124>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d306      	bcc.n	80073d6 <USB_SetTurnaroundTime+0x56>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4a37      	ldr	r2, [pc, #220]	@ (80074a8 <USB_SetTurnaroundTime+0x128>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d202      	bcs.n	80073d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80073d0:	230d      	movs	r3, #13
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e04c      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	4a33      	ldr	r2, [pc, #204]	@ (80074a8 <USB_SetTurnaroundTime+0x128>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d306      	bcc.n	80073ec <USB_SetTurnaroundTime+0x6c>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	4a32      	ldr	r2, [pc, #200]	@ (80074ac <USB_SetTurnaroundTime+0x12c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d802      	bhi.n	80073ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80073e6:	230c      	movs	r3, #12
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	e041      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4a2f      	ldr	r2, [pc, #188]	@ (80074ac <USB_SetTurnaroundTime+0x12c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d906      	bls.n	8007402 <USB_SetTurnaroundTime+0x82>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <USB_SetTurnaroundTime+0x130>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d802      	bhi.n	8007402 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80073fc:	230b      	movs	r3, #11
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e036      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <USB_SetTurnaroundTime+0x130>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d906      	bls.n	8007418 <USB_SetTurnaroundTime+0x98>
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4a29      	ldr	r2, [pc, #164]	@ (80074b4 <USB_SetTurnaroundTime+0x134>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d802      	bhi.n	8007418 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007412:	230a      	movs	r3, #10
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	e02b      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4a26      	ldr	r2, [pc, #152]	@ (80074b4 <USB_SetTurnaroundTime+0x134>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d906      	bls.n	800742e <USB_SetTurnaroundTime+0xae>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4a25      	ldr	r2, [pc, #148]	@ (80074b8 <USB_SetTurnaroundTime+0x138>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d202      	bcs.n	800742e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007428:	2309      	movs	r3, #9
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e020      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4a21      	ldr	r2, [pc, #132]	@ (80074b8 <USB_SetTurnaroundTime+0x138>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d306      	bcc.n	8007444 <USB_SetTurnaroundTime+0xc4>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4a20      	ldr	r2, [pc, #128]	@ (80074bc <USB_SetTurnaroundTime+0x13c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d802      	bhi.n	8007444 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800743e:	2308      	movs	r3, #8
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	e015      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4a1d      	ldr	r2, [pc, #116]	@ (80074bc <USB_SetTurnaroundTime+0x13c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d906      	bls.n	800745a <USB_SetTurnaroundTime+0xda>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4a1c      	ldr	r2, [pc, #112]	@ (80074c0 <USB_SetTurnaroundTime+0x140>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d202      	bcs.n	800745a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007454:	2307      	movs	r3, #7
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e00a      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800745a:	2306      	movs	r3, #6
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	e007      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007466:	2309      	movs	r3, #9
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e001      	b.n	8007470 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800746c:	2309      	movs	r3, #9
 800746e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	029b      	lsls	r3, r3, #10
 8007484:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	00d8acbf 	.word	0x00d8acbf
 80074a0:	00e4e1c0 	.word	0x00e4e1c0
 80074a4:	00f42400 	.word	0x00f42400
 80074a8:	01067380 	.word	0x01067380
 80074ac:	011a499f 	.word	0x011a499f
 80074b0:	01312cff 	.word	0x01312cff
 80074b4:	014ca43f 	.word	0x014ca43f
 80074b8:	016e3600 	.word	0x016e3600
 80074bc:	01a6ab1f 	.word	0x01a6ab1f
 80074c0:	01e84800 	.word	0x01e84800

080074c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f043 0201 	orr.w	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f023 0201 	bic.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d115      	bne.n	8007556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007536:	200a      	movs	r0, #10
 8007538:	f7f9 fde4 	bl	8001104 <HAL_Delay>
      ms += 10U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	330a      	adds	r3, #10
 8007540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 f939 	bl	80087ba <USB_GetMode>
 8007548:	4603      	mov	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d01e      	beq.n	800758c <USB_SetCurrentMode+0x84>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2bc7      	cmp	r3, #199	@ 0xc7
 8007552:	d9f0      	bls.n	8007536 <USB_SetCurrentMode+0x2e>
 8007554:	e01a      	b.n	800758c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d115      	bne.n	8007588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007568:	200a      	movs	r0, #10
 800756a:	f7f9 fdcb 	bl	8001104 <HAL_Delay>
      ms += 10U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	330a      	adds	r3, #10
 8007572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f920 	bl	80087ba <USB_GetMode>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <USB_SetCurrentMode+0x84>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2bc7      	cmp	r3, #199	@ 0xc7
 8007584:	d9f0      	bls.n	8007568 <USB_SetCurrentMode+0x60>
 8007586:	e001      	b.n	800758c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e005      	b.n	8007598 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007590:	d101      	bne.n	8007596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075a0:	b084      	sub	sp, #16
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80075ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	e009      	b.n	80075d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3340      	adds	r3, #64	@ 0x40
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	3301      	adds	r3, #1
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b0e      	cmp	r3, #14
 80075d8:	d9f2      	bls.n	80075c0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d11c      	bne.n	800761c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075f0:	f043 0302 	orr.w	r3, r3, #2
 80075f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e005      	b.n	8007628 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800762e:	461a      	mov	r2, r3
 8007630:	2300      	movs	r3, #0
 8007632:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007634:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007638:	2b01      	cmp	r3, #1
 800763a:	d10d      	bne.n	8007658 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800763c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007644:	2100      	movs	r1, #0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f968 	bl	800791c <USB_SetDevSpeed>
 800764c:	e008      	b.n	8007660 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800764e:	2101      	movs	r1, #1
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f963 	bl	800791c <USB_SetDevSpeed>
 8007656:	e003      	b.n	8007660 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007658:	2103      	movs	r1, #3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f95e 	bl	800791c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007660:	2110      	movs	r1, #16
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8fa 	bl	800785c <USB_FlushTxFifo>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f924 	bl	80078c0 <USB_FlushRxFifo>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007688:	461a      	mov	r2, r3
 800768a:	2300      	movs	r3, #0
 800768c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007694:	461a      	mov	r2, r3
 8007696:	2300      	movs	r3, #0
 8007698:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a0:	461a      	mov	r2, r3
 80076a2:	2300      	movs	r3, #0
 80076a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	e043      	b.n	8007734 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076c2:	d118      	bne.n	80076f6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d6:	461a      	mov	r2, r3
 80076d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e013      	b.n	8007708 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ec:	461a      	mov	r2, r3
 80076ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	e008      	b.n	8007708 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007702:	461a      	mov	r2, r3
 8007704:	2300      	movs	r3, #0
 8007706:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007714:	461a      	mov	r2, r3
 8007716:	2300      	movs	r3, #0
 8007718:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007726:	461a      	mov	r2, r3
 8007728:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800772c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3301      	adds	r3, #1
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007738:	461a      	mov	r2, r3
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	4293      	cmp	r3, r2
 800773e:	d3b5      	bcc.n	80076ac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
 8007744:	e043      	b.n	80077ce <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007758:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800775c:	d118      	bne.n	8007790 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007770:	461a      	mov	r2, r3
 8007772:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	e013      	b.n	80077a2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007786:	461a      	mov	r2, r3
 8007788:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e008      	b.n	80077a2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779c:	461a      	mov	r2, r3
 800779e:	2300      	movs	r3, #0
 80077a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ae:	461a      	mov	r2, r3
 80077b0:	2300      	movs	r3, #0
 80077b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c0:	461a      	mov	r2, r3
 80077c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80077c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3301      	adds	r3, #1
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80077d2:	461a      	mov	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d3b5      	bcc.n	8007746 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80077fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007800:	2b00      	cmp	r3, #0
 8007802:	d105      	bne.n	8007810 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f043 0210 	orr.w	r2, r3, #16
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	4b10      	ldr	r3, [pc, #64]	@ (8007858 <USB_DevInit+0x2b8>)
 8007816:	4313      	orrs	r3, r2
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800781c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f043 0208 	orr.w	r2, r3, #8
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007830:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007834:	2b01      	cmp	r3, #1
 8007836:	d107      	bne.n	8007848 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007840:	f043 0304 	orr.w	r3, r3, #4
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007854:	b004      	add	sp, #16
 8007856:	4770      	bx	lr
 8007858:	803c3800 	.word	0x803c3800

0800785c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3301      	adds	r3, #1
 800786e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007876:	d901      	bls.n	800787c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e01b      	b.n	80078b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	daf2      	bge.n	800786a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	019b      	lsls	r3, r3, #6
 800788c:	f043 0220 	orr.w	r2, r3, #32
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078a0:	d901      	bls.n	80078a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e006      	b.n	80078b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d0f0      	beq.n	8007894 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3301      	adds	r3, #1
 80078d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078d8:	d901      	bls.n	80078de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e018      	b.n	8007910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	daf2      	bge.n	80078cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2210      	movs	r2, #16
 80078ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078fc:	d901      	bls.n	8007902 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e006      	b.n	8007910 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b10      	cmp	r3, #16
 800790c:	d0f0      	beq.n	80078f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800793c:	4313      	orrs	r3, r2
 800793e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800794e:	b480      	push	{r7}
 8007950:	b087      	sub	sp, #28
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0306 	and.w	r3, r3, #6
 8007966:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800796e:	2300      	movs	r3, #0
 8007970:	75fb      	strb	r3, [r7, #23]
 8007972:	e00a      	b.n	800798a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d002      	beq.n	8007980 <USB_GetDevSpeed+0x32>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b06      	cmp	r3, #6
 800797e:	d102      	bne.n	8007986 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007980:	2302      	movs	r3, #2
 8007982:	75fb      	strb	r3, [r7, #23]
 8007984:	e001      	b.n	800798a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007986:	230f      	movs	r3, #15
 8007988:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800798a:	7dfb      	ldrb	r3, [r7, #23]
}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d13a      	bne.n	8007a2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	2101      	movs	r1, #1
 80079c6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	68f9      	ldr	r1, [r7, #12]
 80079ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079d2:	4313      	orrs	r3, r2
 80079d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d155      	bne.n	8007a98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	791b      	ldrb	r3, [r3, #4]
 8007a06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	059b      	lsls	r3, r3, #22
 8007a0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a10:	4313      	orrs	r3, r2
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	e036      	b.n	8007a98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a30:	69da      	ldr	r2, [r3, #28]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d11a      	bne.n	8007a98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d161      	bne.n	8007b88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ada:	d11f      	bne.n	8007b1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007afa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	43db      	mvns	r3, r3
 8007b36:	68f9      	ldr	r1, [r7, #12]
 8007b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	2101      	movs	r1, #1
 8007b52:	fa01 f303 	lsl.w	r3, r1, r3
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b60:	4013      	ands	r3, r2
 8007b62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	0159      	lsls	r1, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	440b      	add	r3, r1
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4b35      	ldr	r3, [pc, #212]	@ (8007c58 <USB_DeactivateEndpoint+0x1b0>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	600b      	str	r3, [r1, #0]
 8007b86:	e060      	b.n	8007c4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b9e:	d11f      	bne.n	8007be0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf6:	041b      	lsls	r3, r3, #16
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c00:	4013      	ands	r3, r2
 8007c02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c0a:	69da      	ldr	r2, [r3, #28]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f003 030f 	and.w	r3, r3, #15
 8007c14:	2101      	movs	r1, #1
 8007c16:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	43db      	mvns	r3, r3
 8007c1e:	68f9      	ldr	r1, [r7, #12]
 8007c20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c24:	4013      	ands	r3, r2
 8007c26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	0159      	lsls	r1, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c42:	4619      	mov	r1, r3
 8007c44:	4b05      	ldr	r3, [pc, #20]	@ (8007c5c <USB_DeactivateEndpoint+0x1b4>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	ec337800 	.word	0xec337800
 8007c5c:	eff37800 	.word	0xeff37800

08007c60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	@ 0x28
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 817f 	bne.w	8007f80 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d132      	bne.n	8007cf0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	69fa      	ldr	r2, [r7, #28]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ca4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ca8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce8:	0cdb      	lsrs	r3, r3, #19
 8007cea:	04db      	lsls	r3, r3, #19
 8007cec:	6113      	str	r3, [r2, #16]
 8007cee:	e097      	b.n	8007e20 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	0151      	lsls	r1, r2, #5
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	440a      	add	r2, r1
 8007d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d0a:	0cdb      	lsrs	r3, r3, #19
 8007d0c:	04db      	lsls	r3, r3, #19
 8007d0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007d2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007d32:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d11a      	bne.n	8007d70 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691a      	ldr	r2, [r3, #16]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d903      	bls.n	8007d4e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d6c:	6113      	str	r3, [r2, #16]
 8007d6e:	e044      	b.n	8007dfa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	1e5a      	subs	r2, r3, #1
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d84:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	8afb      	ldrh	r3, [r7, #22]
 8007d96:	04d9      	lsls	r1, r3, #19
 8007d98:	4ba4      	ldr	r3, [pc, #656]	@ (800802c <USB_EPStartXfer+0x3cc>)
 8007d9a:	400b      	ands	r3, r1
 8007d9c:	69b9      	ldr	r1, [r7, #24]
 8007d9e:	0148      	lsls	r0, r1, #5
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	4401      	add	r1, r0
 8007da4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007da8:	4313      	orrs	r3, r2
 8007daa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	791b      	ldrb	r3, [r3, #4]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d122      	bne.n	8007dfa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007dd2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	8afb      	ldrh	r3, [r7, #22]
 8007de4:	075b      	lsls	r3, r3, #29
 8007de6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007dea:	69b9      	ldr	r1, [r7, #24]
 8007dec:	0148      	lsls	r0, r1, #5
 8007dee:	69f9      	ldr	r1, [r7, #28]
 8007df0:	4401      	add	r1, r0
 8007df2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007df6:	4313      	orrs	r3, r2
 8007df8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	0148      	lsls	r0, r1, #5
 8007e14:	69f9      	ldr	r1, [r7, #28]
 8007e16:	4401      	add	r1, r0
 8007e18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d14b      	bne.n	8007ebe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d128      	bne.n	8007e9c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d110      	bne.n	8007e7c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	0151      	lsls	r1, r2, #5
 8007e6c:	69fa      	ldr	r2, [r7, #28]
 8007e6e:	440a      	add	r2, r1
 8007e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	e00f      	b.n	8007e9c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	0151      	lsls	r1, r2, #5
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	440a      	add	r2, r1
 8007e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e9a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	e166      	b.n	800818c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	015a      	lsls	r2, r3, #5
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	0151      	lsls	r1, r2, #5
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	440a      	add	r2, r1
 8007ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ed8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007edc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	791b      	ldrb	r3, [r3, #4]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d015      	beq.n	8007f12 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 814e 	beq.w	800818c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	69f9      	ldr	r1, [r7, #28]
 8007f08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007f10:	e13c      	b.n	800818c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d110      	bne.n	8007f44 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e00f      	b.n	8007f64 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	0151      	lsls	r1, r2, #5
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	440a      	add	r2, r1
 8007f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f62:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	68d9      	ldr	r1, [r3, #12]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	b298      	uxth	r0, r3
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4603      	mov	r3, r0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f9b9 	bl	80082f0 <USB_WritePacket>
 8007f7e:	e105      	b.n	800818c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f9a:	0cdb      	lsrs	r3, r3, #19
 8007f9c:	04db      	lsls	r3, r3, #19
 8007f9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007fbe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007fc2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d132      	bne.n	8008030 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff8:	69b9      	ldr	r1, [r7, #24]
 8007ffa:	0148      	lsls	r0, r1, #5
 8007ffc:	69f9      	ldr	r1, [r7, #28]
 8007ffe:	4401      	add	r1, r0
 8008000:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008004:	4313      	orrs	r3, r2
 8008006:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008022:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008026:	6113      	str	r3, [r2, #16]
 8008028:	e062      	b.n	80080f0 <USB_EPStartXfer+0x490>
 800802a:	bf00      	nop
 800802c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d123      	bne.n	8008080 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800804e:	69b9      	ldr	r1, [r7, #24]
 8008050:	0148      	lsls	r0, r1, #5
 8008052:	69f9      	ldr	r1, [r7, #28]
 8008054:	4401      	add	r1, r0
 8008056:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800805a:	4313      	orrs	r3, r2
 800805c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008078:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800807c:	6113      	str	r3, [r2, #16]
 800807e:	e037      	b.n	80080f0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	4413      	add	r3, r2
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	fbb2 f3f3 	udiv	r3, r2, r3
 8008094:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	8afa      	ldrh	r2, [r7, #22]
 800809c:	fb03 f202 	mul.w	r2, r3, r2
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	8afb      	ldrh	r3, [r7, #22]
 80080b4:	04d9      	lsls	r1, r3, #19
 80080b6:	4b38      	ldr	r3, [pc, #224]	@ (8008198 <USB_EPStartXfer+0x538>)
 80080b8:	400b      	ands	r3, r1
 80080ba:	69b9      	ldr	r1, [r7, #24]
 80080bc:	0148      	lsls	r0, r1, #5
 80080be:	69f9      	ldr	r1, [r7, #28]
 80080c0:	4401      	add	r1, r0
 80080c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080c6:	4313      	orrs	r3, r2
 80080c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d6:	691a      	ldr	r2, [r3, #16]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	0148      	lsls	r0, r1, #5
 80080e4:	69f9      	ldr	r1, [r7, #28]
 80080e6:	4401      	add	r1, r0
 80080e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80080ec:	4313      	orrs	r3, r2
 80080ee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d10d      	bne.n	8008112 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	68d9      	ldr	r1, [r3, #12]
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810e:	460a      	mov	r2, r1
 8008110:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d128      	bne.n	800816c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008126:	2b00      	cmp	r3, #0
 8008128:	d110      	bne.n	800814c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008144:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	e00f      	b.n	800816c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	0151      	lsls	r1, r2, #5
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	440a      	add	r2, r1
 8008162:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800816a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	440a      	add	r2, r1
 8008182:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008186:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800818a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3720      	adds	r7, #32
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	1ff80000 	.word	0x1ff80000

0800819c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d14a      	bne.n	8008250 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081d2:	f040 8086 	bne.w	80082e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	7812      	ldrb	r2, [r2, #0]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	440a      	add	r2, r1
 8008214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008218:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800821c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f242 7210 	movw	r2, #10000	@ 0x2710
 800822a:	4293      	cmp	r3, r2
 800822c:	d902      	bls.n	8008234 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
          break;
 8008232:	e056      	b.n	80082e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800824c:	d0e7      	beq.n	800821e <USB_EPStopXfer+0x82>
 800824e:	e048      	b.n	80082e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008268:	d13b      	bne.n	80082e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008288:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800828c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	7812      	ldrb	r2, [r2, #0]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80082be:	4293      	cmp	r3, r2
 80082c0:	d902      	bls.n	80082c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
          break;
 80082c6:	e00c      	b.n	80082e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082e0:	d0e7      	beq.n	80082b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b089      	sub	sp, #36	@ 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4611      	mov	r1, r2
 80082fc:	461a      	mov	r2, r3
 80082fe:	460b      	mov	r3, r1
 8008300:	71fb      	strb	r3, [r7, #7]
 8008302:	4613      	mov	r3, r2
 8008304:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800830e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d123      	bne.n	800835e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008316:	88bb      	ldrh	r3, [r7, #4]
 8008318:	3303      	adds	r3, #3
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e018      	b.n	8008356 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	031a      	lsls	r2, r3, #12
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	4413      	add	r3, r2
 800832c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008330:	461a      	mov	r2, r3
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	3301      	adds	r3, #1
 8008342:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	3301      	adds	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3301      	adds	r3, #1
 800834e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	3301      	adds	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	429a      	cmp	r2, r3
 800835c:	d3e2      	bcc.n	8008324 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3724      	adds	r7, #36	@ 0x24
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800836c:	b480      	push	{r7}
 800836e:	b08b      	sub	sp, #44	@ 0x2c
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	b29b      	uxth	r3, r3
 8008388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
 8008396:	e014      	b.n	80083c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	3301      	adds	r3, #1
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	3301      	adds	r3, #1
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	3301      	adds	r3, #1
 80083b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	3301      	adds	r3, #1
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	3301      	adds	r3, #1
 80083c0:	623b      	str	r3, [r7, #32]
 80083c2:	6a3a      	ldr	r2, [r7, #32]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d3e6      	bcc.n	8008398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083ca:	8bfb      	ldrh	r3, [r7, #30]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01e      	beq.n	800840e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083da:	461a      	mov	r2, r3
 80083dc:	f107 0310 	add.w	r3, r7, #16
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	fa22 f303 	lsr.w	r3, r2, r3
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	701a      	strb	r2, [r3, #0]
      i++;
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	3301      	adds	r3, #1
 80083fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	3301      	adds	r3, #1
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008402:	8bfb      	ldrh	r3, [r7, #30]
 8008404:	3b01      	subs	r3, #1
 8008406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008408:	8bfb      	ldrh	r3, [r7, #30]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1ea      	bne.n	80083e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008410:	4618      	mov	r0, r3
 8008412:	372c      	adds	r7, #44	@ 0x2c
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	785b      	ldrb	r3, [r3, #1]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d12c      	bne.n	8008492 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	db12      	blt.n	8008470 <USB_EPSetStall+0x54>
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00f      	beq.n	8008470 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	440a      	add	r2, r1
 8008466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800846a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800846e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	440a      	add	r2, r1
 8008486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800848a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	e02b      	b.n	80084ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db12      	blt.n	80084ca <USB_EPSetStall+0xae>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00f      	beq.n	80084ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	0151      	lsls	r1, r2, #5
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	440a      	add	r2, r1
 80084c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80084c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d128      	bne.n	8008566 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	440a      	add	r2, r1
 800852a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800852e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d003      	beq.n	8008544 <USB_EPClearStall+0x4c>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	791b      	ldrb	r3, [r3, #4]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d138      	bne.n	80085b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800855e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e027      	b.n	80085b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	440a      	add	r2, r1
 800857c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008580:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	2b03      	cmp	r3, #3
 800858c:	d003      	beq.n	8008596 <USB_EPClearStall+0x9e>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	791b      	ldrb	r3, [r3, #4]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d10f      	bne.n	80085b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80085e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80085f8:	68f9      	ldr	r1, [r7, #12]
 80085fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085fe:	4313      	orrs	r3, r2
 8008600:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800863e:	f023 0302 	bic.w	r3, r3, #2
 8008642:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008680:	f043 0302 	orr.w	r3, r3, #2
 8008684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80086ac:	68fb      	ldr	r3, [r7, #12]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	4013      	ands	r3, r2
 80086dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	0c1b      	lsrs	r3, r3, #16
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	4013      	ands	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	b29b      	uxth	r3, r3
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4013      	ands	r3, r2
 800874e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008750:	68bb      	ldr	r3, [r7, #8]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800877e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008780:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	fa22 f303 	lsr.w	r3, r2, r3
 800878e:	01db      	lsls	r3, r3, #7
 8008790:	b2db      	uxtb	r3, r3
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	4313      	orrs	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4013      	ands	r3, r2
 80087aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087ac:	68bb      	ldr	r3, [r7, #8]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	f003 0301 	and.w	r3, r3, #1
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80087f4:	f023 0307 	bic.w	r3, r3, #7
 80087f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800880c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	460b      	mov	r3, r1
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	333c      	adds	r3, #60	@ 0x3c
 8008832:	3304      	adds	r3, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4a26      	ldr	r2, [pc, #152]	@ (80088d4 <USB_EP0_OutStart+0xb8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d90a      	bls.n	8008856 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800884c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008850:	d101      	bne.n	8008856 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e037      	b.n	80088c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	461a      	mov	r2, r3
 800885e:	2300      	movs	r3, #0
 8008860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008870:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008884:	f043 0318 	orr.w	r3, r3, #24
 8008888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008898:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800889c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d10f      	bne.n	80088c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088aa:	461a      	mov	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088be:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80088c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	4f54300a 	.word	0x4f54300a

080088d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088f0:	d901      	bls.n	80088f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e01b      	b.n	800892e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	daf2      	bge.n	80088e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f043 0201 	orr.w	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3301      	adds	r3, #1
 8008912:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800891a:	d901      	bls.n	8008920 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e006      	b.n	800892e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b01      	cmp	r3, #1
 800892a:	d0f0      	beq.n	800890e <USB_CoreReset+0x36>

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	e01f      	b.n	8008992 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	79fa      	ldrb	r2, [r7, #7]
 8008984:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f001 fc1c 	bl	800a1c4 <USBD_LL_Init>
 800898c:	4603      	mov	r3, r0
 800898e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e025      	b.n	80089fe <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	32ae      	adds	r2, #174	@ 0xae
 80089c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00f      	beq.n	80089ee <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	32ae      	adds	r2, #174	@ 0xae
 80089d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	f107 020e 	add.w	r2, r7, #14
 80089e2:	4610      	mov	r0, r2
 80089e4:	4798      	blx	r3
 80089e6:	4602      	mov	r2, r0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 fc24 	bl	800a25c <USBD_LL_Start>
 8008a14:	4603      	mov	r3, r0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d009      	beq.n	8008a62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	4798      	blx	r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	4611      	mov	r1, r2
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 f8e3 	bl	8009c7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ad4:	f003 031f 	and.w	r3, r3, #31
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d01a      	beq.n	8008b12 <USBD_LL_SetupStage+0x72>
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d822      	bhi.n	8008b26 <USBD_LL_SetupStage+0x86>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <USBD_LL_SetupStage+0x4a>
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d00a      	beq.n	8008afe <USBD_LL_SetupStage+0x5e>
 8008ae8:	e01d      	b.n	8008b26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fb10 	bl	8009118 <USBD_StdDevReq>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
      break;
 8008afc:	e020      	b.n	8008b40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fb78 	bl	80091fc <USBD_StdItfReq>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b10:	e016      	b.n	8008b40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fbda 	bl	80092d4 <USBD_StdEPReq>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
      break;
 8008b24:	e00c      	b.n	8008b40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fbf1 	bl	800a31c <USBD_LL_StallEP>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3e:	bf00      	nop
  }

  return ret;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	460b      	mov	r3, r1
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b5c:	7afb      	ldrb	r3, [r7, #11]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d16e      	bne.n	8008c40 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	f040 8098 	bne.w	8008ca6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d913      	bls.n	8008baa <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	1ad2      	subs	r2, r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	bf28      	it	cs
 8008b9c:	4613      	movcs	r3, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f001 f96b 	bl	8009e7e <USBD_CtlContinueRx>
 8008ba8:	e07d      	b.n	8008ca6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d014      	beq.n	8008be2 <USBD_LL_DataOutStage+0x98>
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d81d      	bhi.n	8008bf8 <USBD_LL_DataOutStage+0xae>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <USBD_LL_DataOutStage+0x7c>
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d003      	beq.n	8008bcc <USBD_LL_DataOutStage+0x82>
 8008bc4:	e018      	b.n	8008bf8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75bb      	strb	r3, [r7, #22]
            break;
 8008bca:	e018      	b.n	8008bfe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fa64 	bl	80090a4 <USBD_CoreFindIF>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75bb      	strb	r3, [r7, #22]
            break;
 8008be0:	e00d      	b.n	8008bfe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fa66 	bl	80090be <USBD_CoreFindEP>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8008bf6:	e002      	b.n	8008bfe <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	75bb      	strb	r3, [r7, #22]
            break;
 8008bfc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bfe:	7dbb      	ldrb	r3, [r7, #22]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d119      	bne.n	8008c38 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d113      	bne.n	8008c38 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c10:	7dba      	ldrb	r2, [r7, #22]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	32ae      	adds	r2, #174	@ 0xae
 8008c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c20:	7dba      	ldrb	r2, [r7, #22]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c28:	7dba      	ldrb	r2, [r7, #22]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	32ae      	adds	r2, #174	@ 0xae
 8008c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f001 f931 	bl	8009ea0 <USBD_CtlSendStatus>
 8008c3e:	e032      	b.n	8008ca6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c40:	7afb      	ldrb	r3, [r7, #11]
 8008c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	4619      	mov	r1, r3
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fa37 	bl	80090be <USBD_CoreFindEP>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c54:	7dbb      	ldrb	r3, [r7, #22]
 8008c56:	2bff      	cmp	r3, #255	@ 0xff
 8008c58:	d025      	beq.n	8008ca6 <USBD_LL_DataOutStage+0x15c>
 8008c5a:	7dbb      	ldrb	r3, [r7, #22]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d122      	bne.n	8008ca6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d117      	bne.n	8008c9c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c6c:	7dba      	ldrb	r2, [r7, #22]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	32ae      	adds	r2, #174	@ 0xae
 8008c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00f      	beq.n	8008c9c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c7c:	7dba      	ldrb	r2, [r7, #22]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c84:	7dba      	ldrb	r2, [r7, #22]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	32ae      	adds	r2, #174	@ 0xae
 8008c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	7afa      	ldrb	r2, [r7, #11]
 8008c92:	4611      	mov	r1, r2
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	4798      	blx	r3
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	e000      	b.n	8008ca8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3718      	adds	r7, #24
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d16f      	bne.n	8008da4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3314      	adds	r3, #20
 8008cc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d15a      	bne.n	8008d8a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d914      	bls.n	8008d0a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f001 f893 	bl	8009e22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2100      	movs	r1, #0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 fbb4 	bl	800a470 <USBD_LL_PrepareReceive>
 8008d08:	e03f      	b.n	8008d8a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d11c      	bne.n	8008d50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d316      	bcc.n	8008d50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d20f      	bcs.n	8008d50 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d30:	2200      	movs	r2, #0
 8008d32:	2100      	movs	r1, #0
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f001 f874 	bl	8009e22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	2100      	movs	r1, #0
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f001 fb91 	bl	800a470 <USBD_LL_PrepareReceive>
 8008d4e:	e01c      	b.n	8008d8a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d10f      	bne.n	8008d7c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d7c:	2180      	movs	r1, #128	@ 0x80
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f001 facc 	bl	800a31c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f001 f89e 	bl	8009ec6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d03a      	beq.n	8008e0a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f7ff fe42 	bl	8008a1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008da2:	e032      	b.n	8008e0a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008da4:	7afb      	ldrb	r3, [r7, #11]
 8008da6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	4619      	mov	r1, r3
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f985 	bl	80090be <USBD_CoreFindEP>
 8008db4:	4603      	mov	r3, r0
 8008db6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	2bff      	cmp	r3, #255	@ 0xff
 8008dbc:	d025      	beq.n	8008e0a <USBD_LL_DataInStage+0x15a>
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d122      	bne.n	8008e0a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d11c      	bne.n	8008e0a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008dd0:	7dfa      	ldrb	r2, [r7, #23]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	32ae      	adds	r2, #174	@ 0xae
 8008dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dda:	695b      	ldr	r3, [r3, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d014      	beq.n	8008e0a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008de0:	7dfa      	ldrb	r2, [r7, #23]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008de8:	7dfa      	ldrb	r2, [r7, #23]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	32ae      	adds	r2, #174	@ 0xae
 8008dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	7afa      	ldrb	r2, [r7, #11]
 8008df6:	4611      	mov	r1, r2
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	4798      	blx	r3
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e00:	7dbb      	ldrb	r3, [r7, #22]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e06:	7dbb      	ldrb	r3, [r7, #22]
 8008e08:	e000      	b.n	8008e0c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d014      	beq.n	8008e7a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00e      	beq.n	8008e7a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6852      	ldr	r2, [r2, #4]
 8008e68:	b2d2      	uxtb	r2, r2
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e76:	2303      	movs	r3, #3
 8008e78:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e7a:	2340      	movs	r3, #64	@ 0x40
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 fa06 	bl	800a292 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2240      	movs	r2, #64	@ 0x40
 8008e92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e96:	2340      	movs	r3, #64	@ 0x40
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2180      	movs	r1, #128	@ 0x80
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f9f8 	bl	800a292 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2240      	movs	r2, #64	@ 0x40
 8008eac:	621a      	str	r2, [r3, #32]

  return ret;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b04      	cmp	r3, #4
 8008eea:	d006      	beq.n	8008efa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2204      	movs	r2, #4
 8008efe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d106      	bne.n	8008f32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d110      	bne.n	8008f76 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32ae      	adds	r2, #174	@ 0xae
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e01c      	b.n	8008fdc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d115      	bne.n	8008fda <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	32ae      	adds	r2, #174	@ 0xae
 8008fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	32ae      	adds	r2, #174	@ 0xae
 8008fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	@ 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009002:	2303      	movs	r3, #3
 8009004:	e01c      	b.n	8009040 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	d115      	bne.n	800903e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	32ae      	adds	r2, #174	@ 0xae
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	32ae      	adds	r2, #174	@ 0xae
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	78fa      	ldrb	r2, [r7, #3]
 8009038:	4611      	mov	r1, r2
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00e      	beq.n	800909a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6852      	ldr	r2, [r2, #4]
 8009088:	b2d2      	uxtb	r2, r2
 800908a:	4611      	mov	r1, r2
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009096:	2303      	movs	r3, #3
 8009098:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	3301      	adds	r3, #1
 80090ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	b21a      	sxth	r2, r3
 80090fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009102:	4313      	orrs	r3, r2
 8009104:	b21b      	sxth	r3, r3
 8009106:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009108:	89fb      	ldrh	r3, [r7, #14]
}
 800910a:	4618      	mov	r0, r3
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
	...

08009118 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800912e:	2b40      	cmp	r3, #64	@ 0x40
 8009130:	d005      	beq.n	800913e <USBD_StdDevReq+0x26>
 8009132:	2b40      	cmp	r3, #64	@ 0x40
 8009134:	d857      	bhi.n	80091e6 <USBD_StdDevReq+0xce>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00f      	beq.n	800915a <USBD_StdDevReq+0x42>
 800913a:	2b20      	cmp	r3, #32
 800913c:	d153      	bne.n	80091e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	32ae      	adds	r2, #174	@ 0xae
 8009148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
      break;
 8009158:	e04a      	b.n	80091f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b09      	cmp	r3, #9
 8009160:	d83b      	bhi.n	80091da <USBD_StdDevReq+0xc2>
 8009162:	a201      	add	r2, pc, #4	@ (adr r2, 8009168 <USBD_StdDevReq+0x50>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	080091bd 	.word	0x080091bd
 800916c:	080091d1 	.word	0x080091d1
 8009170:	080091db 	.word	0x080091db
 8009174:	080091c7 	.word	0x080091c7
 8009178:	080091db 	.word	0x080091db
 800917c:	0800919b 	.word	0x0800919b
 8009180:	08009191 	.word	0x08009191
 8009184:	080091db 	.word	0x080091db
 8009188:	080091b3 	.word	0x080091b3
 800918c:	080091a5 	.word	0x080091a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa3c 	bl	8009610 <USBD_GetDescriptor>
          break;
 8009198:	e024      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fbcb 	bl	8009938 <USBD_SetAddress>
          break;
 80091a2:	e01f      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc0a 	bl	80099c0 <USBD_SetConfig>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
          break;
 80091b0:	e018      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fcad 	bl	8009b14 <USBD_GetConfig>
          break;
 80091ba:	e013      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fcde 	bl	8009b80 <USBD_GetStatus>
          break;
 80091c4:	e00e      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fd0d 	bl	8009be8 <USBD_SetFeature>
          break;
 80091ce:	e009      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fd31 	bl	8009c3a <USBD_ClrFeature>
          break;
 80091d8:	e004      	b.n	80091e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fd88 	bl	8009cf2 <USBD_CtlError>
          break;
 80091e2:	bf00      	nop
      }
      break;
 80091e4:	e004      	b.n	80091f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fd82 	bl	8009cf2 <USBD_CtlError>
      break;
 80091ee:	bf00      	nop
  }

  return ret;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop

080091fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009212:	2b40      	cmp	r3, #64	@ 0x40
 8009214:	d005      	beq.n	8009222 <USBD_StdItfReq+0x26>
 8009216:	2b40      	cmp	r3, #64	@ 0x40
 8009218:	d852      	bhi.n	80092c0 <USBD_StdItfReq+0xc4>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <USBD_StdItfReq+0x26>
 800921e:	2b20      	cmp	r3, #32
 8009220:	d14e      	bne.n	80092c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009228:	b2db      	uxtb	r3, r3
 800922a:	3b01      	subs	r3, #1
 800922c:	2b02      	cmp	r3, #2
 800922e:	d840      	bhi.n	80092b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	889b      	ldrh	r3, [r3, #4]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b01      	cmp	r3, #1
 8009238:	d836      	bhi.n	80092a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	889b      	ldrh	r3, [r3, #4]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff ff2e 	bl	80090a4 <USBD_CoreFindIF>
 8009248:	4603      	mov	r3, r0
 800924a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	2bff      	cmp	r3, #255	@ 0xff
 8009250:	d01d      	beq.n	800928e <USBD_StdItfReq+0x92>
 8009252:	7bbb      	ldrb	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d11a      	bne.n	800928e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009258:	7bba      	ldrb	r2, [r7, #14]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32ae      	adds	r2, #174	@ 0xae
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00f      	beq.n	8009288 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009268:	7bba      	ldrb	r2, [r7, #14]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009270:	7bba      	ldrb	r2, [r7, #14]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	32ae      	adds	r2, #174	@ 0xae
 8009276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009286:	e004      	b.n	8009292 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800928c:	e001      	b.n	8009292 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800928e:	2303      	movs	r3, #3
 8009290:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	88db      	ldrh	r3, [r3, #6]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d110      	bne.n	80092bc <USBD_StdItfReq+0xc0>
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10d      	bne.n	80092bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fdfd 	bl	8009ea0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092a6:	e009      	b.n	80092bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fd21 	bl	8009cf2 <USBD_CtlError>
          break;
 80092b0:	e004      	b.n	80092bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fd1c 	bl	8009cf2 <USBD_CtlError>
          break;
 80092ba:	e000      	b.n	80092be <USBD_StdItfReq+0xc2>
          break;
 80092bc:	bf00      	nop
      }
      break;
 80092be:	e004      	b.n	80092ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fd15 	bl	8009cf2 <USBD_CtlError>
      break;
 80092c8:	bf00      	nop
  }

  return ret;
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	889b      	ldrh	r3, [r3, #4]
 80092e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092f0:	2b40      	cmp	r3, #64	@ 0x40
 80092f2:	d007      	beq.n	8009304 <USBD_StdEPReq+0x30>
 80092f4:	2b40      	cmp	r3, #64	@ 0x40
 80092f6:	f200 817f 	bhi.w	80095f8 <USBD_StdEPReq+0x324>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d02a      	beq.n	8009354 <USBD_StdEPReq+0x80>
 80092fe:	2b20      	cmp	r3, #32
 8009300:	f040 817a 	bne.w	80095f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff fed8 	bl	80090be <USBD_CoreFindEP>
 800930e:	4603      	mov	r3, r0
 8009310:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009312:	7b7b      	ldrb	r3, [r7, #13]
 8009314:	2bff      	cmp	r3, #255	@ 0xff
 8009316:	f000 8174 	beq.w	8009602 <USBD_StdEPReq+0x32e>
 800931a:	7b7b      	ldrb	r3, [r7, #13]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 8170 	bne.w	8009602 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009322:	7b7a      	ldrb	r2, [r7, #13]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800932a:	7b7a      	ldrb	r2, [r7, #13]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	32ae      	adds	r2, #174	@ 0xae
 8009330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 8163 	beq.w	8009602 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800933c:	7b7a      	ldrb	r2, [r7, #13]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	32ae      	adds	r2, #174	@ 0xae
 8009342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009352:	e156      	b.n	8009602 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d008      	beq.n	800936e <USBD_StdEPReq+0x9a>
 800935c:	2b03      	cmp	r3, #3
 800935e:	f300 8145 	bgt.w	80095ec <USBD_StdEPReq+0x318>
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 809b 	beq.w	800949e <USBD_StdEPReq+0x1ca>
 8009368:	2b01      	cmp	r3, #1
 800936a:	d03c      	beq.n	80093e6 <USBD_StdEPReq+0x112>
 800936c:	e13e      	b.n	80095ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b02      	cmp	r3, #2
 8009378:	d002      	beq.n	8009380 <USBD_StdEPReq+0xac>
 800937a:	2b03      	cmp	r3, #3
 800937c:	d016      	beq.n	80093ac <USBD_StdEPReq+0xd8>
 800937e:	e02c      	b.n	80093da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00d      	beq.n	80093a2 <USBD_StdEPReq+0xce>
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b80      	cmp	r3, #128	@ 0x80
 800938a:	d00a      	beq.n	80093a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 ffc3 	bl	800a31c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009396:	2180      	movs	r1, #128	@ 0x80
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 ffbf 	bl	800a31c <USBD_LL_StallEP>
 800939e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093a0:	e020      	b.n	80093e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fca4 	bl	8009cf2 <USBD_CtlError>
              break;
 80093aa:	e01b      	b.n	80093e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	885b      	ldrh	r3, [r3, #2]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10e      	bne.n	80093d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <USBD_StdEPReq+0xfe>
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	2b80      	cmp	r3, #128	@ 0x80
 80093be:	d008      	beq.n	80093d2 <USBD_StdEPReq+0xfe>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	88db      	ldrh	r3, [r3, #6]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 ffa5 	bl	800a31c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 fd64 	bl	8009ea0 <USBD_CtlSendStatus>

              break;
 80093d8:	e004      	b.n	80093e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fc88 	bl	8009cf2 <USBD_CtlError>
              break;
 80093e2:	bf00      	nop
          }
          break;
 80093e4:	e107      	b.n	80095f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d002      	beq.n	80093f8 <USBD_StdEPReq+0x124>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d016      	beq.n	8009424 <USBD_StdEPReq+0x150>
 80093f6:	e04b      	b.n	8009490 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <USBD_StdEPReq+0x146>
 80093fe:	7bbb      	ldrb	r3, [r7, #14]
 8009400:	2b80      	cmp	r3, #128	@ 0x80
 8009402:	d00a      	beq.n	800941a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 ff87 	bl	800a31c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800940e:	2180      	movs	r1, #128	@ 0x80
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 ff83 	bl	800a31c <USBD_LL_StallEP>
 8009416:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009418:	e040      	b.n	800949c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc68 	bl	8009cf2 <USBD_CtlError>
              break;
 8009422:	e03b      	b.n	800949c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	885b      	ldrh	r3, [r3, #2]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d136      	bne.n	800949a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009432:	2b00      	cmp	r3, #0
 8009434:	d004      	beq.n	8009440 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 ff8d 	bl	800a35a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fd2d 	bl	8009ea0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff fe37 	bl	80090be <USBD_CoreFindEP>
 8009450:	4603      	mov	r3, r0
 8009452:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009454:	7b7b      	ldrb	r3, [r7, #13]
 8009456:	2bff      	cmp	r3, #255	@ 0xff
 8009458:	d01f      	beq.n	800949a <USBD_StdEPReq+0x1c6>
 800945a:	7b7b      	ldrb	r3, [r7, #13]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d11c      	bne.n	800949a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009460:	7b7a      	ldrb	r2, [r7, #13]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009468:	7b7a      	ldrb	r2, [r7, #13]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	32ae      	adds	r2, #174	@ 0xae
 800946e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d010      	beq.n	800949a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009478:	7b7a      	ldrb	r2, [r7, #13]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	32ae      	adds	r2, #174	@ 0xae
 800947e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800948e:	e004      	b.n	800949a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fc2d 	bl	8009cf2 <USBD_CtlError>
              break;
 8009498:	e000      	b.n	800949c <USBD_StdEPReq+0x1c8>
              break;
 800949a:	bf00      	nop
          }
          break;
 800949c:	e0ab      	b.n	80095f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d002      	beq.n	80094b0 <USBD_StdEPReq+0x1dc>
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d032      	beq.n	8009514 <USBD_StdEPReq+0x240>
 80094ae:	e097      	b.n	80095e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d007      	beq.n	80094c6 <USBD_StdEPReq+0x1f2>
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d004      	beq.n	80094c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fc17 	bl	8009cf2 <USBD_CtlError>
                break;
 80094c4:	e091      	b.n	80095ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	da0b      	bge.n	80094e6 <USBD_StdEPReq+0x212>
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	3310      	adds	r3, #16
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	4413      	add	r3, r2
 80094e2:	3304      	adds	r3, #4
 80094e4:	e00b      	b.n	80094fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	4413      	add	r3, r2
 80094fc:	3304      	adds	r3, #4
 80094fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2202      	movs	r2, #2
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fc6d 	bl	8009dec <USBD_CtlSendData>
              break;
 8009512:	e06a      	b.n	80095ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009518:	2b00      	cmp	r3, #0
 800951a:	da11      	bge.n	8009540 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	f003 020f 	and.w	r2, r3, #15
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	3324      	adds	r3, #36	@ 0x24
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d117      	bne.n	8009566 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fbda 	bl	8009cf2 <USBD_CtlError>
                  break;
 800953e:	e054      	b.n	80095ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	f003 020f 	and.w	r2, r3, #15
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d104      	bne.n	8009566 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fbc7 	bl	8009cf2 <USBD_CtlError>
                  break;
 8009564:	e041      	b.n	80095ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800956a:	2b00      	cmp	r3, #0
 800956c:	da0b      	bge.n	8009586 <USBD_StdEPReq+0x2b2>
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	3310      	adds	r3, #16
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4413      	add	r3, r2
 8009582:	3304      	adds	r3, #4
 8009584:	e00b      	b.n	800959e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4413      	add	r3, r2
 800959c:	3304      	adds	r3, #4
 800959e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <USBD_StdEPReq+0x2d8>
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	2b80      	cmp	r3, #128	@ 0x80
 80095aa:	d103      	bne.n	80095b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	e00e      	b.n	80095d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 feed 	bl	800a398 <USBD_LL_IsStallEP>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2201      	movs	r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e002      	b.n	80095d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2202      	movs	r2, #2
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc07 	bl	8009dec <USBD_CtlSendData>
              break;
 80095de:	e004      	b.n	80095ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fb85 	bl	8009cf2 <USBD_CtlError>
              break;
 80095e8:	bf00      	nop
          }
          break;
 80095ea:	e004      	b.n	80095f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fb7f 	bl	8009cf2 <USBD_CtlError>
          break;
 80095f4:	bf00      	nop
      }
      break;
 80095f6:	e005      	b.n	8009604 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fb79 	bl	8009cf2 <USBD_CtlError>
      break;
 8009600:	e000      	b.n	8009604 <USBD_StdEPReq+0x330>
      break;
 8009602:	bf00      	nop
  }

  return ret;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	885b      	ldrh	r3, [r3, #2]
 800962a:	0a1b      	lsrs	r3, r3, #8
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	2b0e      	cmp	r3, #14
 8009632:	f200 8152 	bhi.w	80098da <USBD_GetDescriptor+0x2ca>
 8009636:	a201      	add	r2, pc, #4	@ (adr r2, 800963c <USBD_GetDescriptor+0x2c>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	080096ad 	.word	0x080096ad
 8009640:	080096c5 	.word	0x080096c5
 8009644:	08009705 	.word	0x08009705
 8009648:	080098db 	.word	0x080098db
 800964c:	080098db 	.word	0x080098db
 8009650:	0800987b 	.word	0x0800987b
 8009654:	080098a7 	.word	0x080098a7
 8009658:	080098db 	.word	0x080098db
 800965c:	080098db 	.word	0x080098db
 8009660:	080098db 	.word	0x080098db
 8009664:	080098db 	.word	0x080098db
 8009668:	080098db 	.word	0x080098db
 800966c:	080098db 	.word	0x080098db
 8009670:	080098db 	.word	0x080098db
 8009674:	08009679 	.word	0x08009679
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7c12      	ldrb	r2, [r2, #16]
 8009690:	f107 0108 	add.w	r1, r7, #8
 8009694:	4610      	mov	r0, r2
 8009696:	4798      	blx	r3
 8009698:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800969a:	e126      	b.n	80098ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fb27 	bl	8009cf2 <USBD_CtlError>
        err++;
 80096a4:	7afb      	ldrb	r3, [r7, #11]
 80096a6:	3301      	adds	r3, #1
 80096a8:	72fb      	strb	r3, [r7, #11]
      break;
 80096aa:	e11e      	b.n	80098ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7c12      	ldrb	r2, [r2, #16]
 80096b8:	f107 0108 	add.w	r1, r7, #8
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
      break;
 80096c2:	e112      	b.n	80098ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	7c1b      	ldrb	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10d      	bne.n	80096e8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d4:	f107 0208 	add.w	r2, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	2202      	movs	r2, #2
 80096e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096e6:	e100      	b.n	80098ea <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	f107 0208 	add.w	r2, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3301      	adds	r3, #1
 80096fe:	2202      	movs	r2, #2
 8009700:	701a      	strb	r2, [r3, #0]
      break;
 8009702:	e0f2      	b.n	80098ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	885b      	ldrh	r3, [r3, #2]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b05      	cmp	r3, #5
 800970c:	f200 80ac 	bhi.w	8009868 <USBD_GetDescriptor+0x258>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <USBD_GetDescriptor+0x108>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009731 	.word	0x08009731
 800971c:	08009765 	.word	0x08009765
 8009720:	08009799 	.word	0x08009799
 8009724:	080097cd 	.word	0x080097cd
 8009728:	08009801 	.word	0x08009801
 800972c:	08009835 	.word	0x08009835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00b      	beq.n	8009754 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	7c12      	ldrb	r2, [r2, #16]
 8009748:	f107 0108 	add.w	r1, r7, #8
 800974c:	4610      	mov	r0, r2
 800974e:	4798      	blx	r3
 8009750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009752:	e091      	b.n	8009878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 facb 	bl	8009cf2 <USBD_CtlError>
            err++;
 800975c:	7afb      	ldrb	r3, [r7, #11]
 800975e:	3301      	adds	r3, #1
 8009760:	72fb      	strb	r3, [r7, #11]
          break;
 8009762:	e089      	b.n	8009878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00b      	beq.n	8009788 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	7c12      	ldrb	r2, [r2, #16]
 800977c:	f107 0108 	add.w	r1, r7, #8
 8009780:	4610      	mov	r0, r2
 8009782:	4798      	blx	r3
 8009784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009786:	e077      	b.n	8009878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fab1 	bl	8009cf2 <USBD_CtlError>
            err++;
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	3301      	adds	r3, #1
 8009794:	72fb      	strb	r3, [r7, #11]
          break;
 8009796:	e06f      	b.n	8009878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00b      	beq.n	80097bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	7c12      	ldrb	r2, [r2, #16]
 80097b0:	f107 0108 	add.w	r1, r7, #8
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
 80097b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ba:	e05d      	b.n	8009878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fa97 	bl	8009cf2 <USBD_CtlError>
            err++;
 80097c4:	7afb      	ldrb	r3, [r7, #11]
 80097c6:	3301      	adds	r3, #1
 80097c8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ca:	e055      	b.n	8009878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	7c12      	ldrb	r2, [r2, #16]
 80097e4:	f107 0108 	add.w	r1, r7, #8
 80097e8:	4610      	mov	r0, r2
 80097ea:	4798      	blx	r3
 80097ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ee:	e043      	b.n	8009878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa7d 	bl	8009cf2 <USBD_CtlError>
            err++;
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	3301      	adds	r3, #1
 80097fc:	72fb      	strb	r3, [r7, #11]
          break;
 80097fe:	e03b      	b.n	8009878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	7c12      	ldrb	r2, [r2, #16]
 8009818:	f107 0108 	add.w	r1, r7, #8
 800981c:	4610      	mov	r0, r2
 800981e:	4798      	blx	r3
 8009820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009822:	e029      	b.n	8009878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fa63 	bl	8009cf2 <USBD_CtlError>
            err++;
 800982c:	7afb      	ldrb	r3, [r7, #11]
 800982e:	3301      	adds	r3, #1
 8009830:	72fb      	strb	r3, [r7, #11]
          break;
 8009832:	e021      	b.n	8009878 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d00b      	beq.n	8009858 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	7c12      	ldrb	r2, [r2, #16]
 800984c:	f107 0108 	add.w	r1, r7, #8
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009856:	e00f      	b.n	8009878 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa49 	bl	8009cf2 <USBD_CtlError>
            err++;
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	3301      	adds	r3, #1
 8009864:	72fb      	strb	r3, [r7, #11]
          break;
 8009866:	e007      	b.n	8009878 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa41 	bl	8009cf2 <USBD_CtlError>
          err++;
 8009870:	7afb      	ldrb	r3, [r7, #11]
 8009872:	3301      	adds	r3, #1
 8009874:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009876:	bf00      	nop
      }
      break;
 8009878:	e037      	b.n	80098ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7c1b      	ldrb	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988a:	f107 0208 	add.w	r2, r7, #8
 800988e:	4610      	mov	r0, r2
 8009890:	4798      	blx	r3
 8009892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009894:	e029      	b.n	80098ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa2a 	bl	8009cf2 <USBD_CtlError>
        err++;
 800989e:	7afb      	ldrb	r3, [r7, #11]
 80098a0:	3301      	adds	r3, #1
 80098a2:	72fb      	strb	r3, [r7, #11]
      break;
 80098a4:	e021      	b.n	80098ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	7c1b      	ldrb	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10d      	bne.n	80098ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b6:	f107 0208 	add.w	r2, r7, #8
 80098ba:	4610      	mov	r0, r2
 80098bc:	4798      	blx	r3
 80098be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	2207      	movs	r2, #7
 80098c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098c8:	e00f      	b.n	80098ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fa10 	bl	8009cf2 <USBD_CtlError>
        err++;
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	3301      	adds	r3, #1
 80098d6:	72fb      	strb	r3, [r7, #11]
      break;
 80098d8:	e007      	b.n	80098ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fa08 	bl	8009cf2 <USBD_CtlError>
      err++;
 80098e2:	7afb      	ldrb	r3, [r7, #11]
 80098e4:	3301      	adds	r3, #1
 80098e6:	72fb      	strb	r3, [r7, #11]
      break;
 80098e8:	bf00      	nop
  }

  if (err != 0U)
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d11e      	bne.n	800992e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	88db      	ldrh	r3, [r3, #6]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d016      	beq.n	8009926 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80098f8:	893b      	ldrh	r3, [r7, #8]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00e      	beq.n	800991c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	88da      	ldrh	r2, [r3, #6]
 8009902:	893b      	ldrh	r3, [r7, #8]
 8009904:	4293      	cmp	r3, r2
 8009906:	bf28      	it	cs
 8009908:	4613      	movcs	r3, r2
 800990a:	b29b      	uxth	r3, r3
 800990c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	461a      	mov	r2, r3
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fa69 	bl	8009dec <USBD_CtlSendData>
 800991a:	e009      	b.n	8009930 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9e7 	bl	8009cf2 <USBD_CtlError>
 8009924:	e004      	b.n	8009930 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 faba 	bl	8009ea0 <USBD_CtlSendStatus>
 800992c:	e000      	b.n	8009930 <USBD_GetDescriptor+0x320>
    return;
 800992e:	bf00      	nop
  }
}
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop

08009938 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	889b      	ldrh	r3, [r3, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d131      	bne.n	80099ae <USBD_SetAddress+0x76>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	88db      	ldrh	r3, [r3, #6]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d12d      	bne.n	80099ae <USBD_SetAddress+0x76>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	885b      	ldrh	r3, [r3, #2]
 8009956:	2b7f      	cmp	r3, #127	@ 0x7f
 8009958:	d829      	bhi.n	80099ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	885b      	ldrh	r3, [r3, #2]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009964:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b03      	cmp	r3, #3
 8009970:	d104      	bne.n	800997c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f9bc 	bl	8009cf2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	e01d      	b.n	80099b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7bfa      	ldrb	r2, [r7, #15]
 8009980:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fd31 	bl	800a3f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa86 	bl	8009ea0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2202      	movs	r2, #2
 800999e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a2:	e009      	b.n	80099b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ac:	e004      	b.n	80099b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f99e 	bl	8009cf2 <USBD_CtlError>
  }
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	885b      	ldrh	r3, [r3, #2]
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	4b4e      	ldr	r3, [pc, #312]	@ (8009b10 <USBD_SetConfig+0x150>)
 80099d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099d8:	4b4d      	ldr	r3, [pc, #308]	@ (8009b10 <USBD_SetConfig+0x150>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d905      	bls.n	80099ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f985 	bl	8009cf2 <USBD_CtlError>
    return USBD_FAIL;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e08c      	b.n	8009b06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d002      	beq.n	80099fe <USBD_SetConfig+0x3e>
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d029      	beq.n	8009a50 <USBD_SetConfig+0x90>
 80099fc:	e075      	b.n	8009aea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099fe:	4b44      	ldr	r3, [pc, #272]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d020      	beq.n	8009a48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a06:	4b42      	ldr	r3, [pc, #264]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a10:	4b3f      	ldr	r3, [pc, #252]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff f80c 	bl	8008a34 <USBD_SetClassConfig>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d008      	beq.n	8009a38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f962 	bl	8009cf2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2202      	movs	r2, #2
 8009a32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a36:	e065      	b.n	8009b04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa31 	bl	8009ea0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2203      	movs	r2, #3
 8009a42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a46:	e05d      	b.n	8009b04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa29 	bl	8009ea0 <USBD_CtlSendStatus>
      break;
 8009a4e:	e059      	b.n	8009b04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a50:	4b2f      	ldr	r3, [pc, #188]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d112      	bne.n	8009a7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a60:	4b2b      	ldr	r3, [pc, #172]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	461a      	mov	r2, r3
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a6a:	4b29      	ldr	r3, [pc, #164]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7fe fffb 	bl	8008a6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa12 	bl	8009ea0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a7c:	e042      	b.n	8009b04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a7e:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d02a      	beq.n	8009ae2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7fe ffe9 	bl	8008a6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7fe ffc2 	bl	8008a34 <USBD_SetClassConfig>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00f      	beq.n	8009ada <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f918 	bl	8009cf2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7fe ffce 	bl	8008a6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ad8:	e014      	b.n	8009b04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f9e0 	bl	8009ea0 <USBD_CtlSendStatus>
      break;
 8009ae0:	e010      	b.n	8009b04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f9dc 	bl	8009ea0 <USBD_CtlSendStatus>
      break;
 8009ae8:	e00c      	b.n	8009b04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f900 	bl	8009cf2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009af2:	4b07      	ldr	r3, [pc, #28]	@ (8009b10 <USBD_SetConfig+0x150>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fe ffb7 	bl	8008a6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	73fb      	strb	r3, [r7, #15]
      break;
 8009b02:	bf00      	nop
  }

  return ret;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000304 	.word	0x20000304

08009b14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	88db      	ldrh	r3, [r3, #6]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d004      	beq.n	8009b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8e2 	bl	8009cf2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b2e:	e023      	b.n	8009b78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	dc02      	bgt.n	8009b42 <USBD_GetConfig+0x2e>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dc03      	bgt.n	8009b48 <USBD_GetConfig+0x34>
 8009b40:	e015      	b.n	8009b6e <USBD_GetConfig+0x5a>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d00b      	beq.n	8009b5e <USBD_GetConfig+0x4a>
 8009b46:	e012      	b.n	8009b6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3308      	adds	r3, #8
 8009b52:	2201      	movs	r2, #1
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f948 	bl	8009dec <USBD_CtlSendData>
        break;
 8009b5c:	e00c      	b.n	8009b78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3304      	adds	r3, #4
 8009b62:	2201      	movs	r2, #1
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f940 	bl	8009dec <USBD_CtlSendData>
        break;
 8009b6c:	e004      	b.n	8009b78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f8be 	bl	8009cf2 <USBD_CtlError>
        break;
 8009b76:	bf00      	nop
}
 8009b78:	bf00      	nop
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	3b01      	subs	r3, #1
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d81e      	bhi.n	8009bd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	88db      	ldrh	r3, [r3, #6]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d004      	beq.n	8009baa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f8a5 	bl	8009cf2 <USBD_CtlError>
        break;
 8009ba8:	e01a      	b.n	8009be0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f043 0202 	orr.w	r2, r3, #2
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	330c      	adds	r3, #12
 8009bca:	2202      	movs	r2, #2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f90c 	bl	8009dec <USBD_CtlSendData>
      break;
 8009bd4:	e004      	b.n	8009be0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f88a 	bl	8009cf2 <USBD_CtlError>
      break;
 8009bde:	bf00      	nop
  }
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d107      	bne.n	8009c0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f94c 	bl	8009ea0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c08:	e013      	b.n	8009c32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	885b      	ldrh	r3, [r3, #2]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d10b      	bne.n	8009c2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	889b      	ldrh	r3, [r3, #4]
 8009c16:	0a1b      	lsrs	r3, r3, #8
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f93c 	bl	8009ea0 <USBD_CtlSendStatus>
}
 8009c28:	e003      	b.n	8009c32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f860 	bl	8009cf2 <USBD_CtlError>
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d80b      	bhi.n	8009c6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	885b      	ldrh	r3, [r3, #2]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d10c      	bne.n	8009c74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f91c 	bl	8009ea0 <USBD_CtlSendStatus>
      }
      break;
 8009c68:	e004      	b.n	8009c74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f840 	bl	8009cf2 <USBD_CtlError>
      break;
 8009c72:	e000      	b.n	8009c76 <USBD_ClrFeature+0x3c>
      break;
 8009c74:	bf00      	nop
  }
}
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	781a      	ldrb	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3301      	adds	r3, #1
 8009c98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	781a      	ldrb	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fa15 	bl	80090d8 <SWAPBYTE>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f7ff fa08 	bl	80090d8 <SWAPBYTE>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	461a      	mov	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff f9fb 	bl	80090d8 <SWAPBYTE>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	80da      	strh	r2, [r3, #6]
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cfc:	2180      	movs	r1, #128	@ 0x80
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fb0c 	bl	800a31c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d04:	2100      	movs	r1, #0
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fb08 	bl	800a31c <USBD_LL_StallEP>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d042      	beq.n	8009db0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d2e:	6938      	ldr	r0, [r7, #16]
 8009d30:	f000 f842 	bl	8009db8 <USBD_GetLen>
 8009d34:	4603      	mov	r3, r0
 8009d36:	3301      	adds	r3, #1
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d3e:	d808      	bhi.n	8009d52 <USBD_GetString+0x3e>
 8009d40:	6938      	ldr	r0, [r7, #16]
 8009d42:	f000 f839 	bl	8009db8 <USBD_GetLen>
 8009d46:	4603      	mov	r3, r0
 8009d48:	3301      	adds	r3, #1
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	e001      	b.n	8009d56 <USBD_GetString+0x42>
 8009d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	4413      	add	r3, r2
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4413      	add	r3, r2
 8009d72:	2203      	movs	r2, #3
 8009d74:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d7c:	e013      	b.n	8009da6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	4413      	add	r3, r2
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
    idx++;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	3301      	adds	r3, #1
 8009d94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	3301      	adds	r3, #1
 8009da4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e7      	bne.n	8009d7e <USBD_GetString+0x6a>
 8009dae:	e000      	b.n	8009db2 <USBD_GetString+0x9e>
    return;
 8009db0:	bf00      	nop
  }
}
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dc8:	e005      	b.n	8009dd6 <USBD_GetLen+0x1e>
  {
    len++;
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1f5      	bne.n	8009dca <USBD_GetLen+0x12>
  }

  return len;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	2100      	movs	r1, #0
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fb0b 	bl	800a42e <USBD_LL_Transmit>

  return USBD_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	60b9      	str	r1, [r7, #8]
 8009e2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	2100      	movs	r1, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 fafa 	bl	800a42e <USBD_LL_Transmit>

  return USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2203      	movs	r2, #3
 8009e54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fafe 	bl	800a470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 faed 	bl	800a470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fab9 	bl	800a42e <USBD_LL_Transmit>

  return USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2205      	movs	r2, #5
 8009ed2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fac7 	bl	800a470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	490e      	ldr	r1, [pc, #56]	@ (8009f2c <MX_USB_DEVICE_Init+0x40>)
 8009ef4:	480e      	ldr	r0, [pc, #56]	@ (8009f30 <MX_USB_DEVICE_Init+0x44>)
 8009ef6:	f7fe fd20 	bl	800893a <USBD_Init>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f00:	f7f6 fd40 	bl	8000984 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_GSUSB) != USBD_OK)
 8009f04:	490b      	ldr	r1, [pc, #44]	@ (8009f34 <MX_USB_DEVICE_Init+0x48>)
 8009f06:	480a      	ldr	r0, [pc, #40]	@ (8009f30 <MX_USB_DEVICE_Init+0x44>)
 8009f08:	f7fe fd47 	bl	800899a <USBD_RegisterClass>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f12:	f7f6 fd37 	bl	8000984 <Error_Handler>
  }
//  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
//  {
//    Error_Handler();
//  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f16:	4806      	ldr	r0, [pc, #24]	@ (8009f30 <MX_USB_DEVICE_Init+0x44>)
 8009f18:	f7fe fd75 	bl	8008a06 <USBD_Start>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009f22:	f7f6 fd2f 	bl	8000984 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f26:	bf00      	nop
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000044 	.word	0x20000044
 8009f30:	20000308 	.word	0x20000308
 8009f34:	2000000c 	.word	0x2000000c

08009f38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	@ 0x28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	605a      	str	r2, [r3, #4]
 8009f4a:	609a      	str	r2, [r3, #8]
 8009f4c:	60da      	str	r2, [r3, #12]
 8009f4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f58:	d13a      	bne.n	8009fd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f62:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009f76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f84:	2303      	movs	r3, #3
 8009f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f88:	230a      	movs	r3, #10
 8009f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f8c:	f107 0314 	add.w	r3, r7, #20
 8009f90:	4619      	mov	r1, r3
 8009f92:	4812      	ldr	r0, [pc, #72]	@ (8009fdc <HAL_PCD_MspInit+0xa4>)
 8009f94:	f7f8 fa20 	bl	80023d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f98:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009f9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fa2:	6353      	str	r3, [r2, #52]	@ 0x34
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fac:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8009fb4:	4b08      	ldr	r3, [pc, #32]	@ (8009fd8 <HAL_PCD_MspInit+0xa0>)
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fbc:	60fb      	str	r3, [r7, #12]
 8009fbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	2043      	movs	r0, #67	@ 0x43
 8009fc6:	f7f7 fe54 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fca:	2043      	movs	r0, #67	@ 0x43
 8009fcc:	f7f7 fe6d 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	3728      	adds	r7, #40	@ 0x28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	40023800 	.word	0x40023800
 8009fdc:	40020000 	.word	0x40020000

08009fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fe fd52 	bl	8008aa0 <USBD_LL_SetupStage>
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	6879      	ldr	r1, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	4413      	add	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	440b      	add	r3, r1
 800a024:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	4619      	mov	r1, r3
 800a02e:	f7fe fd8c 	bl	8008b4a <USBD_LL_DataOutStage>
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	4613      	mov	r3, r2
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	3320      	adds	r3, #32
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	4619      	mov	r1, r3
 800a062:	f7fe fe25 	bl	8008cb0 <USBD_LL_DataInStage>
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe ff5f 	bl	8008f40 <USBD_LL_SOF>
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	79db      	ldrb	r3, [r3, #7]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
 800a0a2:	e008      	b.n	800a0b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	79db      	ldrb	r3, [r3, #7]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d102      	bne.n	800a0b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
 800a0b0:	e001      	b.n	800a0b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a0b2:	f7f6 fc67 	bl	8000984 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0bc:	7bfa      	ldrb	r2, [r7, #15]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe fef9 	bl	8008eb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fea1 	bl	8008e14 <USBD_LL_Reset>
}
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fef4 	bl	8008ed8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	7adb      	ldrb	r3, [r3, #11]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a110:	4b04      	ldr	r3, [pc, #16]	@ (800a124 <HAL_PCD_SuspendCallback+0x48>)
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	4a03      	ldr	r2, [pc, #12]	@ (800a124 <HAL_PCD_SuspendCallback+0x48>)
 800a116:	f043 0306 	orr.w	r3, r3, #6
 800a11a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	e000ed00 	.word	0xe000ed00

0800a128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe feea 	bl	8008f10 <USBD_LL_Resume>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe ff42 	bl	8008fe4 <USBD_LL_IsoOUTIncomplete>
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fefe 	bl	8008f80 <USBD_LL_IsoINIncomplete>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe ff54 	bl	8009048 <USBD_LL_DevConnected>
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe ff51 	bl	800905e <USBD_LL_DevDisconnected>
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d13c      	bne.n	800a24e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1d4:	4a20      	ldr	r2, [pc, #128]	@ (800a258 <USBD_LL_Init+0x94>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a1e      	ldr	r2, [pc, #120]	@ (800a258 <USBD_LL_Init+0x94>)
 800a1e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a258 <USBD_LL_Init+0x94>)
 800a1e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a1ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a1ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a258 <USBD_LL_Init+0x94>)
 800a1ee:	2206      	movs	r2, #6
 800a1f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1f2:	4b19      	ldr	r3, [pc, #100]	@ (800a258 <USBD_LL_Init+0x94>)
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1f8:	4b17      	ldr	r3, [pc, #92]	@ (800a258 <USBD_LL_Init+0x94>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1fe:	4b16      	ldr	r3, [pc, #88]	@ (800a258 <USBD_LL_Init+0x94>)
 800a200:	2202      	movs	r2, #2
 800a202:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a204:	4b14      	ldr	r3, [pc, #80]	@ (800a258 <USBD_LL_Init+0x94>)
 800a206:	2200      	movs	r2, #0
 800a208:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a20a:	4b13      	ldr	r3, [pc, #76]	@ (800a258 <USBD_LL_Init+0x94>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a210:	4b11      	ldr	r3, [pc, #68]	@ (800a258 <USBD_LL_Init+0x94>)
 800a212:	2200      	movs	r2, #0
 800a214:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a216:	4b10      	ldr	r3, [pc, #64]	@ (800a258 <USBD_LL_Init+0x94>)
 800a218:	2200      	movs	r2, #0
 800a21a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a21c:	4b0e      	ldr	r3, [pc, #56]	@ (800a258 <USBD_LL_Init+0x94>)
 800a21e:	2200      	movs	r2, #0
 800a220:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a222:	480d      	ldr	r0, [pc, #52]	@ (800a258 <USBD_LL_Init+0x94>)
 800a224:	f7f8 fa9f 	bl	8002766 <HAL_PCD_Init>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a22e:	f7f6 fba9 	bl	8000984 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a232:	2180      	movs	r1, #128	@ 0x80
 800a234:	4808      	ldr	r0, [pc, #32]	@ (800a258 <USBD_LL_Init+0x94>)
 800a236:	f7f9 fce8 	bl	8003c0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a23a:	2240      	movs	r2, #64	@ 0x40
 800a23c:	2100      	movs	r1, #0
 800a23e:	4806      	ldr	r0, [pc, #24]	@ (800a258 <USBD_LL_Init+0x94>)
 800a240:	f7f9 fc9c 	bl	8003b7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a244:	2280      	movs	r2, #128	@ 0x80
 800a246:	2101      	movs	r1, #1
 800a248:	4803      	ldr	r0, [pc, #12]	@ (800a258 <USBD_LL_Init+0x94>)
 800a24a:	f7f9 fc97 	bl	8003b7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200005e4 	.word	0x200005e4

0800a25c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a272:	4618      	mov	r0, r3
 800a274:	f7f8 fb8d 	bl	8002992 <HAL_PCD_Start>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f966 	bl	800a550 <USBD_Get_USB_Status>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a288:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	4608      	mov	r0, r1
 800a29c:	4611      	mov	r1, r2
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	70fb      	strb	r3, [r7, #3]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70bb      	strb	r3, [r7, #2]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a2ba:	78bb      	ldrb	r3, [r7, #2]
 800a2bc:	883a      	ldrh	r2, [r7, #0]
 800a2be:	78f9      	ldrb	r1, [r7, #3]
 800a2c0:	f7f9 f88e 	bl	80033e0 <HAL_PCD_EP_Open>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f940 	bl	800a550 <USBD_Get_USB_Status>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7f9 f8d9 	bl	80034b4 <HAL_PCD_EP_Close>
 800a302:	4603      	mov	r3, r0
 800a304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 f921 	bl	800a550 <USBD_Get_USB_Status>
 800a30e:	4603      	mov	r3, r0
 800a310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a312:	7bbb      	ldrb	r3, [r7, #14]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a336:	78fa      	ldrb	r2, [r7, #3]
 800a338:	4611      	mov	r1, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f9 f979 	bl	8003632 <HAL_PCD_EP_SetStall>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f902 	bl	800a550 <USBD_Get_USB_Status>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a350:	7bbb      	ldrb	r3, [r7, #14]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f9 f9bd 	bl	80036f8 <HAL_PCD_EP_ClrStall>
 800a37e:	4603      	mov	r3, r0
 800a380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f8e3 	bl	800a550 <USBD_Get_USB_Status>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da0b      	bge.n	800a3cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	3316      	adds	r3, #22
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	e00b      	b.n	800a3e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	4413      	add	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a3e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f8 ffc2 	bl	8003398 <HAL_PCD_SetAddress>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 f898 	bl	800a550 <USBD_Get_USB_Status>
 800a420:	4603      	mov	r3, r0
 800a422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a424:	7bbb      	ldrb	r3, [r7, #14]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b086      	sub	sp, #24
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	460b      	mov	r3, r1
 800a43c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a44c:	7af9      	ldrb	r1, [r7, #11]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	f7f9 f8b4 	bl	80035be <HAL_PCD_EP_Transmit>
 800a456:	4603      	mov	r3, r0
 800a458:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 f877 	bl	800a550 <USBD_Get_USB_Status>
 800a462:	4603      	mov	r3, r0
 800a464:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a466:	7dbb      	ldrb	r3, [r7, #22]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	607a      	str	r2, [r7, #4]
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	460b      	mov	r3, r1
 800a47e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a48e:	7af9      	ldrb	r1, [r7, #11]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	f7f9 f858 	bl	8003548 <HAL_PCD_EP_Receive>
 800a498:	4603      	mov	r3, r0
 800a49a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f856 	bl	800a550 <USBD_Get_USB_Status>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <HAL_PCDEx_LPM_Callback+0x18>
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d01f      	beq.n	800a50a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a4ca:	e03b      	b.n	800a544 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7adb      	ldrb	r3, [r3, #11]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d007      	beq.n	800a4e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a4d4:	f7f6 f84e 	bl	8000574 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a54c <HAL_PCDEx_LPM_Callback+0x98>)
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a54c <HAL_PCDEx_LPM_Callback+0x98>)
 800a4de:	f023 0306 	bic.w	r3, r3, #6
 800a4e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6812      	ldr	r2, [r2, #0]
 800a4f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4f6:	f023 0301 	bic.w	r3, r3, #1
 800a4fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fd04 	bl	8008f10 <USBD_LL_Resume>
    break;
 800a508:	e01c      	b.n	800a544 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6812      	ldr	r2, [r2, #0]
 800a518:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a51c:	f043 0301 	orr.w	r3, r3, #1
 800a520:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fcd5 	bl	8008ed8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7adb      	ldrb	r3, [r3, #11]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d005      	beq.n	800a542 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a536:	4b05      	ldr	r3, [pc, #20]	@ (800a54c <HAL_PCDEx_LPM_Callback+0x98>)
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	4a04      	ldr	r2, [pc, #16]	@ (800a54c <HAL_PCDEx_LPM_Callback+0x98>)
 800a53c:	f043 0306 	orr.w	r3, r3, #6
 800a540:	6113      	str	r3, [r2, #16]
    break;
 800a542:	bf00      	nop
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	2b03      	cmp	r3, #3
 800a562:	d817      	bhi.n	800a594 <USBD_Get_USB_Status+0x44>
 800a564:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <USBD_Get_USB_Status+0x1c>)
 800a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56a:	bf00      	nop
 800a56c:	0800a57d 	.word	0x0800a57d
 800a570:	0800a583 	.word	0x0800a583
 800a574:	0800a589 	.word	0x0800a589
 800a578:	0800a58f 	.word	0x0800a58f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
    break;
 800a580:	e00b      	b.n	800a59a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a582:	2303      	movs	r3, #3
 800a584:	73fb      	strb	r3, [r7, #15]
    break;
 800a586:	e008      	b.n	800a59a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a588:	2301      	movs	r3, #1
 800a58a:	73fb      	strb	r3, [r7, #15]
    break;
 800a58c:	e005      	b.n	800a59a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a58e:	2303      	movs	r3, #3
 800a590:	73fb      	strb	r3, [r7, #15]
    break;
 800a592:	e002      	b.n	800a59a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a594:	2303      	movs	r3, #3
 800a596:	73fb      	strb	r3, [r7, #15]
    break;
 800a598:	bf00      	nop
  }
  return usb_status;
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USBD_GSUSB_Init>:
  /* nothing additional to register */
  return USBD_OK;
}

/* Initialize: open bulk endpoints & prepare first RX */
static uint8_t USBD_GSUSB_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  (void)cfgidx;
  USBD_LL_OpenEP(pdev, GSUSB_IN_EP,  USBD_EP_TYPE_BULK, GSUSB_MAX_PACKET_SIZE);
 800a5b4:	2340      	movs	r3, #64	@ 0x40
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	2181      	movs	r1, #129	@ 0x81
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fe69 	bl	800a292 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, GSUSB_OUT_EP, USBD_EP_TYPE_BULK, GSUSB_MAX_PACKET_SIZE);
 800a5c0:	2340      	movs	r3, #64	@ 0x40
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f7ff fe63 	bl	800a292 <USBD_LL_OpenEP>
  memset(&gsusb_handle, 0, sizeof(gsusb_handle));
 800a5cc:	2261      	movs	r2, #97	@ 0x61
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	4808      	ldr	r0, [pc, #32]	@ (800a5f4 <USBD_GSUSB_Init+0x4c>)
 800a5d2:	f000 faae 	bl	800ab32 <memset>
  pdev->pClassData = &gsusb_handle;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a06      	ldr	r2, [pc, #24]	@ (800a5f4 <USBD_GSUSB_Init+0x4c>)
 800a5da:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  USBD_LL_PrepareReceive(pdev, GSUSB_OUT_EP,
 800a5de:	2340      	movs	r3, #64	@ 0x40
 800a5e0:	4a05      	ldr	r2, [pc, #20]	@ (800a5f8 <USBD_GSUSB_Init+0x50>)
 800a5e2:	2102      	movs	r1, #2
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff ff43 	bl	800a470 <USBD_LL_PrepareReceive>
                         gsusb_handle.rx_buffer, GSUSB_MAX_PACKET_SIZE);
  return USBD_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	20000ac8 	.word	0x20000ac8
 800a5f8:	20000ae9 	.word	0x20000ae9

0800a5fc <USBD_GSUSB_DeInit>:

/* DeInit: close endpoints */
static uint8_t USBD_GSUSB_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  (void)cfgidx;
  USBD_LL_CloseEP(pdev, GSUSB_IN_EP);
 800a608:	2181      	movs	r1, #129	@ 0x81
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fe67 	bl	800a2de <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, GSUSB_OUT_EP);
 800a610:	2102      	movs	r1, #2
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fe63 	bl	800a2de <USBD_LL_CloseEP>
  pdev->pClassData = NULL;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  return USBD_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <USBD_GSUSB_Setup>:

/* Handle standard & vendor requests */
static uint8_t USBD_GSUSB_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req) {
 800a62c:	b5b0      	push	{r4, r5, r7, lr}
 800a62e:	b08e      	sub	sp, #56	@ 0x38
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  USBD_GSUSB_HandleTypeDef *h = &gsusb_handle;
 800a636:	4b32      	ldr	r3, [pc, #200]	@ (800a700 <USBD_GSUSB_Setup+0xd4>)
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Vendor-specific requests */
  if ((req->bmRequest & USB_REQ_TYPE_MASK) == USB_REQ_TYPE_VENDOR) {
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a642:	2b40      	cmp	r3, #64	@ 0x40
 800a644:	d157      	bne.n	800a6f6 <USBD_GSUSB_Setup+0xca>
    switch (req->bRequest) {
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	785b      	ldrb	r3, [r3, #1]
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	d84b      	bhi.n	800a6e6 <USBD_GSUSB_Setup+0xba>
 800a64e:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <USBD_GSUSB_Setup+0x28>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a675 	.word	0x0800a675
 800a658:	0800a6b7 	.word	0x0800a6b7
 800a65c:	0800a6c7 	.word	0x0800a6c7
 800a660:	0800a6e7 	.word	0x0800a6e7
 800a664:	0800a68f 	.word	0x0800a68f
 800a668:	0800a683 	.word	0x0800a683
 800a66c:	0800a6e7 	.word	0x0800a6e7
 800a670:	0800a6d7 	.word	0x0800a6d7
      case GS_USB_BREQ_HOST_FORMAT:
        /* Host tells us its byte-order (we just swallow it) */
        USBD_CtlPrepareRx(pdev,
                          (uint8_t*)&h->host_byte_order,
 800a674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        USBD_CtlPrepareRx(pdev,
 800a676:	2204      	movs	r2, #4
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fbe2 	bl	8009e44 <USBD_CtlPrepareRx>
                          sizeof(h->host_byte_order));
        break;
 800a680:	e037      	b.n	800a6f2 <USBD_GSUSB_Setup+0xc6>

      case GS_USB_BREQ_DEVICE_CONFIG:
        /* Tell host about our one CAN channel + versions */

    	  USBD_CtlSendData(pdev, (uint8_t*)&device_config, sizeof(device_config));
 800a682:	220c      	movs	r2, #12
 800a684:	491f      	ldr	r1, [pc, #124]	@ (800a704 <USBD_GSUSB_Setup+0xd8>)
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fbb0 	bl	8009dec <USBD_CtlSendData>
        break;
 800a68c:	e031      	b.n	800a6f2 <USBD_GSUSB_Setup+0xc6>

      case GS_USB_BREQ_BT_CONST: {
        /* (same as before) */
        gs_device_bt_const btc = {
 800a68e:	4b1e      	ldr	r3, [pc, #120]	@ (800a708 <USBD_GSUSB_Setup+0xdc>)
 800a690:	f107 040c 	add.w	r4, r7, #12
 800a694:	461d      	mov	r5, r3
 800a696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a69a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a69c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a69e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a6a2:	e884 0003 	stmia.w	r4, {r0, r1}
          .tseg1_min = 1,  .tseg1_max = 16,
          .tseg2_min = 1,  .tseg2_max = 8,
          .sjw_max   = 4,
          .brp_min   = 1,  .brp_max   = 1024, .brp_inc = 1
        };
        USBD_CtlSendData(pdev,
 800a6a6:	f107 030c 	add.w	r3, r7, #12
 800a6aa:	2228      	movs	r2, #40	@ 0x28
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fb9c 	bl	8009dec <USBD_CtlSendData>
                         (uint8_t*)&btc,
                         sizeof(btc));
        break;
 800a6b4:	e01d      	b.n	800a6f2 <USBD_GSUSB_Setup+0xc6>
      }

      case GS_USB_BREQ_BITTIMING:
        USBD_CtlPrepareRx(pdev,
             (uint8_t*)&h->pending_bittiming,
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b8:	3304      	adds	r3, #4
        USBD_CtlPrepareRx(pdev,
 800a6ba:	2214      	movs	r2, #20
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fbc0 	bl	8009e44 <USBD_CtlPrepareRx>
             sizeof(gs_device_bittiming));
        break;
 800a6c4:	e015      	b.n	800a6f2 <USBD_GSUSB_Setup+0xc6>

      case GS_USB_BREQ_MODE:
        USBD_CtlPrepareRx(pdev,
             (uint8_t*)&h->pending_mode,
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c8:	3318      	adds	r3, #24
        USBD_CtlPrepareRx(pdev,
 800a6ca:	2208      	movs	r2, #8
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7ff fbb8 	bl	8009e44 <USBD_CtlPrepareRx>
             sizeof(gs_device_mode));
        break;
 800a6d4:	e00d      	b.n	800a6f2 <USBD_GSUSB_Setup+0xc6>

      case GS_USB_BREQ_IDENTIFY:
        USBD_CtlPrepareRx(pdev,
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	3320      	adds	r3, #32
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff fbb0 	bl	8009e44 <USBD_CtlPrepareRx>
             (uint8_t*)&h->identify_state,
             sizeof(h->identify_state));
        break;
 800a6e4:	e005      	b.n	800a6f2 <USBD_GSUSB_Setup+0xc6>

      default:
        USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fb02 	bl	8009cf2 <USBD_CtlError>
        return USBD_FAIL;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e002      	b.n	800a6f8 <USBD_GSUSB_Setup+0xcc>
    }
    return USBD_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e000      	b.n	800a6f8 <USBD_GSUSB_Setup+0xcc>
  }

  /* Standard requests are handled by the USB core (GetDescriptor etc.) */
  return USBD_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3738      	adds	r7, #56	@ 0x38
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a700:	20000ac8 	.word	0x20000ac8
 800a704:	0800ac48 	.word	0x0800ac48
 800a708:	0800abc0 	.word	0x0800abc0

0800a70c <USBD_GSUSB_EP0_RxReady>:

/* After EP0 data-out completes, apply CAN config/mode/identify */
static uint8_t USBD_GSUSB_EP0_RxReady(USBD_HandleTypeDef *pdev) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
	  USBD_GSUSB_HandleTypeDef *h = &gsusb_handle;
 800a714:	4b18      	ldr	r3, [pc, #96]	@ (800a778 <USBD_GSUSB_EP0_RxReady+0x6c>)
 800a716:	61fb      	str	r3, [r7, #28]

	  /* Handle host byte-order handshake (GS_USB_BREQ_HOST_FORMAT) */
	  if (h->host_byte_order == 0x0000BEEF) {
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f64b 62ef 	movw	r2, #48879	@ 0xbeef
 800a720:	4293      	cmp	r3, r2
 800a722:	d108      	bne.n	800a736 <USBD_GSUSB_EP0_RxReady+0x2a>
	    // Linux host sent expected handshake
	    h->host_byte_order = 0;  // Clear it (optional)
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	2200      	movs	r2, #0
 800a72c:	705a      	strb	r2, [r3, #1]
 800a72e:	2200      	movs	r2, #0
 800a730:	709a      	strb	r2, [r3, #2]
 800a732:	2200      	movs	r2, #0
 800a734:	70da      	strb	r2, [r3, #3]
	  }

	  /* Apply bit timing if provided */
	  if (memcmp(&h->pending_bittiming, &(gs_device_bittiming){0}, sizeof(gs_device_bittiming)) != 0) {
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	1d18      	adds	r0, r3, #4
 800a73a:	f107 0308 	add.w	r3, r7, #8
 800a73e:	2200      	movs	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	605a      	str	r2, [r3, #4]
 800a744:	609a      	str	r2, [r3, #8]
 800a746:	60da      	str	r2, [r3, #12]
 800a748:	611a      	str	r2, [r3, #16]
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	2214      	movs	r2, #20
 800a750:	4619      	mov	r1, r3
 800a752:	f000 f9de 	bl	800ab12 <memcmp>
	    // TODO: apply bit timing
	  }

	  if (h->pending_mode.mode == GS_CAN_MODE_START) {
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d103      	bne.n	800a766 <USBD_GSUSB_EP0_RxReady+0x5a>
	    HAL_CAN_Start(&hcan2);
 800a75e:	4807      	ldr	r0, [pc, #28]	@ (800a77c <USBD_GSUSB_EP0_RxReady+0x70>)
 800a760:	f7f6 fdef 	bl	8001342 <HAL_CAN_Start>
 800a764:	e002      	b.n	800a76c <USBD_GSUSB_EP0_RxReady+0x60>
	  } else {
	    HAL_CAN_Stop(&hcan2);
 800a766:	4805      	ldr	r0, [pc, #20]	@ (800a77c <USBD_GSUSB_EP0_RxReady+0x70>)
 800a768:	f7f6 fe2f 	bl	80013ca <HAL_CAN_Stop>
	  }

	  return USBD_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3720      	adds	r7, #32
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000ac8 	.word	0x20000ac8
 800a77c:	200000e8 	.word	0x200000e8

0800a780 <USBD_GSUSB_DataIn>:

/* Bulk IN complete: you could flush a TX queue here */
static uint8_t USBD_GSUSB_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  (void)pdev; (void)epnum;
  /* Nothing special: next TX will be sent from DataOut echo or CAN RX handler */
  return USBD_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <USBD_GSUSB_DataOut>:

/* Bulk OUT: host → CAN bus */
static uint8_t USBD_GSUSB_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08e      	sub	sp, #56	@ 0x38
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
  USBD_GSUSB_HandleTypeDef *h = &gsusb_handle;
 800a7a8:	4b27      	ldr	r3, [pc, #156]	@ (800a848 <USBD_GSUSB_DataOut+0xac>)
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
  gs_host_frame *f = (gs_host_frame*)h->rx_buffer;
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ae:	3321      	adds	r3, #33	@ 0x21
 800a7b0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Parse CAN ID & flags */
  CAN_TxHeaderTypeDef txh;
  uint8_t txdata[8];
  if (f->can_id & 0x80000000U) {
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	da07      	bge.n	800a7ca <USBD_GSUSB_DataOut+0x2e>
    txh.IDE   = CAN_ID_EXT;
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	623b      	str	r3, [r7, #32]
    txh.ExtId = f->can_id & 0x1FFFFFFFU;
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	e006      	b.n	800a7d8 <USBD_GSUSB_DataOut+0x3c>
  } else {
    txh.IDE   = CAN_ID_STD;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	623b      	str	r3, [r7, #32]
    txh.StdId = f->can_id & 0x7FFU;
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7d6:	61bb      	str	r3, [r7, #24]
  }
  txh.RTR = (f->can_id & 0x20000000U) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	0f1b      	lsrs	r3, r3, #28
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	627b      	str	r3, [r7, #36]	@ 0x24
  txh.DLC = f->can_dlc;
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	7a1b      	ldrb	r3, [r3, #8]
 800a7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  txh.TransmitGlobalTime = DISABLE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  memcpy(txdata, f->data, txh.DLC);
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	f103 010c 	add.w	r1, r3, #12
 800a7f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7f8:	f107 0310 	add.w	r3, r7, #16
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 f9c5 	bl	800ab8c <memcpy>

  /* Send on CAN bus */
  HAL_CAN_AddTxMessage(&hcan2, &txh, txdata, &(uint32_t){0});
 800a802:	2300      	movs	r3, #0
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	f107 030c 	add.w	r3, r7, #12
 800a80a:	f107 0210 	add.w	r2, r7, #16
 800a80e:	f107 0118 	add.w	r1, r7, #24
 800a812:	480e      	ldr	r0, [pc, #56]	@ (800a84c <USBD_GSUSB_DataOut+0xb0>)
 800a814:	f7f6 fe22 	bl	800145c <HAL_CAN_AddTxMessage>

  /* Echo back to host (use same buffer) */
  USBD_LL_Transmit(pdev, GSUSB_IN_EP, h->rx_buffer, (uint16_t)(12 + f->can_dlc));
 800a818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81a:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a820:	7a1b      	ldrb	r3, [r3, #8]
 800a822:	330c      	adds	r3, #12
 800a824:	b29b      	uxth	r3, r3
 800a826:	2181      	movs	r1, #129	@ 0x81
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff fe00 	bl	800a42e <USBD_LL_Transmit>

  /* Re-arm for next OUT packet */
  USBD_LL_PrepareReceive(pdev, GSUSB_OUT_EP,
                         h->rx_buffer, GSUSB_MAX_PACKET_SIZE);
 800a82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a830:	f103 0221 	add.w	r2, r3, #33	@ 0x21
  USBD_LL_PrepareReceive(pdev, GSUSB_OUT_EP,
 800a834:	2340      	movs	r3, #64	@ 0x40
 800a836:	2102      	movs	r1, #2
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff fe19 	bl	800a470 <USBD_LL_PrepareReceive>
  return USBD_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3738      	adds	r7, #56	@ 0x38
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20000ac8 	.word	0x20000ac8
 800a84c:	200000e8 	.word	0x200000e8

0800a850 <USBD_GSUSB_GetFSCfgDesc>:

#ifndef USE_USBD_COMPOSITE
/* Return FS config descriptor */
static uint8_t *USBD_GSUSB_GetFSCfgDesc(uint16_t *length) {
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  *length = USBD_GSUSB_CONFIG_DESC_SIZ;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2220      	movs	r2, #32
 800a85c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_GSUSB_CfgFSDesc;
 800a85e:	4b03      	ldr	r3, [pc, #12]	@ (800a86c <USBD_GSUSB_GetFSCfgDesc+0x1c>)
}
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	0800ac60 	.word	0x0800ac60

0800a870 <USBD_GSUSB_GetHSCfgDesc>:

/* For HS, mirror FS descriptor or provide a true HS descriptor */
static uint8_t *USBD_GSUSB_GetHSCfgDesc(uint16_t *length) {
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  *length = USBD_GSUSB_CONFIG_DESC_SIZ;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_GSUSB_CfgFSDesc;
 800a87e:	4b03      	ldr	r3, [pc, #12]	@ (800a88c <USBD_GSUSB_GetHSCfgDesc+0x1c>)
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	0800ac60 	.word	0x0800ac60

0800a890 <USBD_GSUSB_GetOtherSpeedCfgDesc>:

/* Other-speed: same as FS */
static uint8_t *USBD_GSUSB_GetOtherSpeedCfgDesc(uint16_t *length) {
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  *length = USBD_GSUSB_CONFIG_DESC_SIZ;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_GSUSB_CfgFSDesc;
 800a89e:	4b03      	ldr	r3, [pc, #12]	@ (800a8ac <USBD_GSUSB_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	0800ac60 	.word	0x0800ac60

0800a8b0 <USBD_GSUSB_GetDeviceQualifierDesc>:

/* Device qualifier for HS clients */
static uint8_t *USBD_GSUSB_GetDeviceQualifierDesc(uint16_t *length) {
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  *length = USB_LEN_DEV_QUALIFIER_DESC;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	220a      	movs	r2, #10
 800a8bc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_GSUSB_QualifierDesc;
 800a8be:	4b03      	ldr	r3, [pc, #12]	@ (800a8cc <USBD_GSUSB_GetDeviceQualifierDesc+0x1c>)
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	0800ac54 	.word	0x0800ac54

0800a8d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	6039      	str	r1, [r7, #0]
 800a8da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2212      	movs	r2, #18
 800a8e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8e2:	4b03      	ldr	r3, [pc, #12]	@ (800a8f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	20000064 	.word	0x20000064

0800a8f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	6039      	str	r1, [r7, #0]
 800a8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2204      	movs	r2, #4
 800a904:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a906:	4b03      	ldr	r3, [pc, #12]	@ (800a914 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000084 	.word	0x20000084

0800a918 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	6039      	str	r1, [r7, #0]
 800a922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	4907      	ldr	r1, [pc, #28]	@ (800a94c <USBD_FS_ProductStrDescriptor+0x34>)
 800a92e:	4808      	ldr	r0, [pc, #32]	@ (800a950 <USBD_FS_ProductStrDescriptor+0x38>)
 800a930:	f7ff f9f0 	bl	8009d14 <USBD_GetString>
 800a934:	e004      	b.n	800a940 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	4904      	ldr	r1, [pc, #16]	@ (800a94c <USBD_FS_ProductStrDescriptor+0x34>)
 800a93a:	4805      	ldr	r0, [pc, #20]	@ (800a950 <USBD_FS_ProductStrDescriptor+0x38>)
 800a93c:	f7ff f9ea 	bl	8009d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a940:	4b02      	ldr	r3, [pc, #8]	@ (800a94c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000b2c 	.word	0x20000b2c
 800a950:	0800abe8 	.word	0x0800abe8

0800a954 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	4603      	mov	r3, r0
 800a95c:	6039      	str	r1, [r7, #0]
 800a95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	4904      	ldr	r1, [pc, #16]	@ (800a974 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a964:	4804      	ldr	r0, [pc, #16]	@ (800a978 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a966:	f7ff f9d5 	bl	8009d14 <USBD_GetString>
  return USBD_StrDesc;
 800a96a:	4b02      	ldr	r3, [pc, #8]	@ (800a974 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	20000b2c 	.word	0x20000b2c
 800a978:	0800abf4 	.word	0x0800abf4

0800a97c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	6039      	str	r1, [r7, #0]
 800a986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	221a      	movs	r2, #26
 800a98c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a98e:	f000 f855 	bl	800aa3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a992:	4b02      	ldr	r3, [pc, #8]	@ (800a99c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20000088 	.word	0x20000088

0800a9a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	6039      	str	r1, [r7, #0]
 800a9aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d105      	bne.n	800a9be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	4907      	ldr	r1, [pc, #28]	@ (800a9d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9b6:	4808      	ldr	r0, [pc, #32]	@ (800a9d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9b8:	f7ff f9ac 	bl	8009d14 <USBD_GetString>
 800a9bc:	e004      	b.n	800a9c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	4904      	ldr	r1, [pc, #16]	@ (800a9d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9c2:	4805      	ldr	r0, [pc, #20]	@ (800a9d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9c4:	f7ff f9a6 	bl	8009d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9c8:	4b02      	ldr	r3, [pc, #8]	@ (800a9d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000b2c 	.word	0x20000b2c
 800a9d8:	0800ac04 	.word	0x0800ac04

0800a9dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	6039      	str	r1, [r7, #0]
 800a9e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d105      	bne.n	800a9fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4907      	ldr	r1, [pc, #28]	@ (800aa10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9f2:	4808      	ldr	r0, [pc, #32]	@ (800aa14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9f4:	f7ff f98e 	bl	8009d14 <USBD_GetString>
 800a9f8:	e004      	b.n	800aa04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	4904      	ldr	r1, [pc, #16]	@ (800aa10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9fe:	4805      	ldr	r0, [pc, #20]	@ (800aa14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa00:	f7ff f988 	bl	8009d14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa04:	4b02      	ldr	r3, [pc, #8]	@ (800aa10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000b2c 	.word	0x20000b2c
 800aa14:	0800ac14 	.word	0x0800ac14

0800aa18 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	220c      	movs	r2, #12
 800aa28:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800aa2a:	4b03      	ldr	r3, [pc, #12]	@ (800aa38 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	20000078 	.word	0x20000078

0800aa3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa42:	4b0f      	ldr	r3, [pc, #60]	@ (800aa80 <Get_SerialNum+0x44>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa48:	4b0e      	ldr	r3, [pc, #56]	@ (800aa84 <Get_SerialNum+0x48>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa4e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa88 <Get_SerialNum+0x4c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4413      	add	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d009      	beq.n	800aa76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa62:	2208      	movs	r2, #8
 800aa64:	4909      	ldr	r1, [pc, #36]	@ (800aa8c <Get_SerialNum+0x50>)
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f814 	bl	800aa94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	4908      	ldr	r1, [pc, #32]	@ (800aa90 <Get_SerialNum+0x54>)
 800aa70:	68b8      	ldr	r0, [r7, #8]
 800aa72:	f000 f80f 	bl	800aa94 <IntToUnicode>
  }
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	1fff7a10 	.word	0x1fff7a10
 800aa84:	1fff7a14 	.word	0x1fff7a14
 800aa88:	1fff7a18 	.word	0x1fff7a18
 800aa8c:	2000008a 	.word	0x2000008a
 800aa90:	2000009a 	.word	0x2000009a

0800aa94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b087      	sub	sp, #28
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	75fb      	strb	r3, [r7, #23]
 800aaaa:	e027      	b.n	800aafc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	0f1b      	lsrs	r3, r3, #28
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	d80b      	bhi.n	800aacc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	0f1b      	lsrs	r3, r3, #28
 800aab8:	b2da      	uxtb	r2, r3
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	4619      	mov	r1, r3
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	440b      	add	r3, r1
 800aac4:	3230      	adds	r2, #48	@ 0x30
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	e00a      	b.n	800aae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	0f1b      	lsrs	r3, r3, #28
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	4619      	mov	r1, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	440b      	add	r3, r1
 800aadc:	3237      	adds	r2, #55	@ 0x37
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	3301      	adds	r3, #1
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aaf6:	7dfb      	ldrb	r3, [r7, #23]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	75fb      	strb	r3, [r7, #23]
 800aafc:	7dfa      	ldrb	r2, [r7, #23]
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d3d3      	bcc.n	800aaac <IntToUnicode+0x18>
  }
}
 800ab04:	bf00      	nop
 800ab06:	bf00      	nop
 800ab08:	371c      	adds	r7, #28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <memcmp>:
 800ab12:	b510      	push	{r4, lr}
 800ab14:	3901      	subs	r1, #1
 800ab16:	4402      	add	r2, r0
 800ab18:	4290      	cmp	r0, r2
 800ab1a:	d101      	bne.n	800ab20 <memcmp+0xe>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e005      	b.n	800ab2c <memcmp+0x1a>
 800ab20:	7803      	ldrb	r3, [r0, #0]
 800ab22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	d001      	beq.n	800ab2e <memcmp+0x1c>
 800ab2a:	1b18      	subs	r0, r3, r4
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	3001      	adds	r0, #1
 800ab30:	e7f2      	b.n	800ab18 <memcmp+0x6>

0800ab32 <memset>:
 800ab32:	4402      	add	r2, r0
 800ab34:	4603      	mov	r3, r0
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d100      	bne.n	800ab3c <memset+0xa>
 800ab3a:	4770      	bx	lr
 800ab3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ab40:	e7f9      	b.n	800ab36 <memset+0x4>
	...

0800ab44 <__libc_init_array>:
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4d0d      	ldr	r5, [pc, #52]	@ (800ab7c <__libc_init_array+0x38>)
 800ab48:	4c0d      	ldr	r4, [pc, #52]	@ (800ab80 <__libc_init_array+0x3c>)
 800ab4a:	1b64      	subs	r4, r4, r5
 800ab4c:	10a4      	asrs	r4, r4, #2
 800ab4e:	2600      	movs	r6, #0
 800ab50:	42a6      	cmp	r6, r4
 800ab52:	d109      	bne.n	800ab68 <__libc_init_array+0x24>
 800ab54:	4d0b      	ldr	r5, [pc, #44]	@ (800ab84 <__libc_init_array+0x40>)
 800ab56:	4c0c      	ldr	r4, [pc, #48]	@ (800ab88 <__libc_init_array+0x44>)
 800ab58:	f000 f826 	bl	800aba8 <_init>
 800ab5c:	1b64      	subs	r4, r4, r5
 800ab5e:	10a4      	asrs	r4, r4, #2
 800ab60:	2600      	movs	r6, #0
 800ab62:	42a6      	cmp	r6, r4
 800ab64:	d105      	bne.n	800ab72 <__libc_init_array+0x2e>
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6c:	4798      	blx	r3
 800ab6e:	3601      	adds	r6, #1
 800ab70:	e7ee      	b.n	800ab50 <__libc_init_array+0xc>
 800ab72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab76:	4798      	blx	r3
 800ab78:	3601      	adds	r6, #1
 800ab7a:	e7f2      	b.n	800ab62 <__libc_init_array+0x1e>
 800ab7c:	0800ac88 	.word	0x0800ac88
 800ab80:	0800ac88 	.word	0x0800ac88
 800ab84:	0800ac88 	.word	0x0800ac88
 800ab88:	0800ac8c 	.word	0x0800ac8c

0800ab8c <memcpy>:
 800ab8c:	440a      	add	r2, r1
 800ab8e:	4291      	cmp	r1, r2
 800ab90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab94:	d100      	bne.n	800ab98 <memcpy+0xc>
 800ab96:	4770      	bx	lr
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aba2:	4291      	cmp	r1, r2
 800aba4:	d1f9      	bne.n	800ab9a <memcpy+0xe>
 800aba6:	bd10      	pop	{r4, pc}

0800aba8 <_init>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr

0800abb4 <_fini>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	bf00      	nop
 800abb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abba:	bc08      	pop	{r3}
 800abbc:	469e      	mov	lr, r3
 800abbe:	4770      	bx	lr
